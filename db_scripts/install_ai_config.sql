-- Andre 26/06/2025
-- Create OCI AI Settings. Tables, Procedures etc
CREATE TABLE AI_PROMPT_COMPONENTS (
    id              NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    component_type  VARCHAR2(50), -- e.g., 'INSTRUCTION', 'SCHEMA', 'TABLE_DESCRIPTIONS'
    content         CLOB,
    updated_at      TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE AI_PROMPT_EXAMPLES (
    id              NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    example_order   NUMBER, -- used for ordering
    user_question   VARCHAR2(1000),
    oracle_sql      CLOB,
    updated_at      TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE ai_model_config (
    model_id          VARCHAR2(1000),
    model_name        VARCHAR2(1000), -- e.g., 'Cohere', 'Llama'
    api_format        VARCHAR2(50),  -- 'COHERE' or 'GENERIC'
    is_default        VARCHAR2(1),   -- 'Y' for default
    region            VARCHAR2(50),
    temperature       NUMBER,
    top_p             NUMBER,
    top_k             NUMBER,
    frequency_penalty NUMBER,
    presence_penalty  NUMBER
);

--------------------------------------------------------
--  DDL for Procedure OV_AI_AGENT_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE OV_AI_CHATBOT_PROC (
    p_user_message    IN VARCHAR2,
    p_model_id        IN VARCHAR2,
    p_chat_id         IN NUMBER,
    p_app_user        IN VARCHAR2,
    p_app_session     IN VARCHAR2,
    p_compartment_id  IN VARCHAR2,
    p_row_id          OUT ai_chat_log.id%TYPE,
    p_final_sql       OUT CLOB,
    p_final_response  OUT CLOB,
    p_final_aimessage OUT CLOB
) AS
    v_attempt            NUMBER := 0;
    v_max_attempts       CONSTANT NUMBER := 5;
    v_last_failed        VARCHAR2(1) := 'Y';
    v_reasoned_message   CLOB;
    v_reasoning_row_id   NUMBER;
    v_response_sql       CLOB;
    v_response           CLOB;
    v_aimessage          CLOB;
    v_log_row_id         ai_chat_log.id%TYPE;
    l_input_text         VARCHAR2(4000);
    l_prompt             CLOB;
    l_payload            CLOB;
    l_reasoning_response CLOB;
    l_response_struct    dbms_cloud_types.resp;
    l_resp_obj           json_object_t;
    l_result_text        VARCHAR2(4000);
    v_summary_text       CLOB;
    v_summary_prompt     VARCHAR2(4000);
    l_sql_body           VARCHAR2(32767);
    l_sql                VARCHAR2(32767);
    l_cursor             INTEGER;
    l_desc_tab           dbms_sql.desc_tab;
    l_col_count          INTEGER;
    l_value              VARCHAR2(4000);
    l_has_data           BOOLEAN := FALSE;
    l_status             INTEGER;
    l_reasoning_endpoint VARCHAR2(1000);
    l_instruction        CLOB;
    l_schema_info        CLOB;
    l_table_desc         CLOB;
    l_examples           CLOB;

    -- New config variables
    l_region             VARCHAR2(50);
    l_model_id           VARCHAR2(1000);
    l_api_format         VARCHAR2(50);
    l_temperature        NUMBER;
    l_top_p              NUMBER;
    l_top_k              NUMBER;
    l_frequency_penalty  NUMBER;
    l_presence_penalty   NUMBER;

BEGIN
    apex_debug.message('✨ Starting OV_AI_CHATBOT_PROC_LLAMA');

    BEGIN
        SELECT
            region,
            model_id,
            api_format,
            NVL(temperature, 1),
            NVL(top_p, 1),
            NVL(top_k, 1),
            NVL(frequency_penalty, 0),
            NVL(presence_penalty, 0)
        INTO
            l_region,
            l_model_id,
            l_api_format,
            l_temperature,
            l_top_p,
            l_top_k,
            l_frequency_penalty,
            l_presence_penalty
        FROM
            ai_model_config
        WHERE model_id = p_model_id;

        l_reasoning_endpoint := 'https://inference.generativeai.'
                                || LOWER(l_region)
                                || '.oci.oraclecloud.com/20231130/actions/chat';

        apex_debug.message('📄 GenAI endpoint: %s', l_reasoning_endpoint);
        apex_debug.message('📦 Model: %s, Format: %s', l_model_id, l_api_format);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            raise_application_error(-20002, 'No AI model config found for given agent ID.');
    END;
    BEGIN
        SELECT
            content
        INTO l_instruction
        FROM
            ai_prompt_components
        WHERE
            component_type = 'INSTRUCTION';

        SELECT
            content
        INTO l_schema_info
        FROM
            ai_prompt_components
        WHERE
            component_type = 'SCHEMA';

        SELECT
            content
        INTO l_table_desc
        FROM
            ai_prompt_components
        WHERE
            component_type = 'TABLE_DESCRIPTIONS';

        FOR r IN (
            SELECT
                user_question,
                oracle_sql
            FROM
                ai_prompt_examples
            ORDER BY
                example_order
        ) LOOP
            l_examples := l_examples
                          || 'Q: '
                          || r.user_question
                          || chr(10)
                          || 'A: '
                          || r.oracle_sql
                          || chr(10)
                          || chr(10);
        END LOOP;

    EXCEPTION
        WHEN OTHERS THEN
            apex_debug.message('⚠️ Failed loading prompt components: %s', sqlerrm);
            raise_application_error(-20001, 'Failed to load AI prompt components');
    END;

    LOOP
        v_attempt := v_attempt + 1;
        apex_debug.message('⏳ Attempt #%s', v_attempt);
        DECLARE
            l_input VARCHAR2(32767) :=
                CASE
                    WHEN v_attempt = 1 OR v_reasoned_message IS NULL THEN
                        p_user_message
                    ELSE v_reasoned_message
                END;
        BEGIN
            apex_debug.message('🔍 Input message: %s', l_input);
            l_prompt := l_instruction || chr(10) || '-- SCHEMA --' || chr(10) || l_schema_info || chr(10) || '-- TABLES --' || chr(10) || l_table_desc || chr(10) || '-- EXAMPLES --' || chr(10) || l_examples || '-- QUESTION --' || chr(10) || 'Q: ' || l_input || chr(10) || 'A:';
            IF l_api_format = 'COHERE' THEN
                l_payload := '{"compartmentId": "' || p_compartment_id || '", 
                    "servingMode": {
                        "modelId": "' || l_model_id || '", 
                        "servingType": "ON_DEMAND"}, 
                    "chatRequest": {
                        "apiFormat": "COHERE",
                        "maxTokens": 2048,
                        "frequencyPenalty": ' || TO_CHAR(l_frequency_penalty, 'FM9990.00') || ',
                        "presencePenalty": ' || TO_CHAR(l_presence_penalty, 'FM9990.00') || ',
                        "temperature": ' || TO_CHAR(l_temperature, 'FM9990.00') || ',
                        "topP": ' || TO_CHAR(l_top_p, 'FM9990.00') || ',
                        "topK": ' || TO_CHAR(l_top_k, 'FM9990') || ',
                        "message": "' || replace(replace(l_prompt, '"', '\"'), chr(10), '\n') || '" 
                    }
                }';
            ELSIF l_api_format = 'GENERIC' THEN
                l_payload := '{
                    "compartmentId": "' || p_compartment_id || '",
                    "servingMode": {
                        "modelId": "' || l_model_id || '",
                        "servingType": "ON_DEMAND"
                    },
                    "chatRequest": {
                        "messages": [{
                            "role": "USER",
                            "content": [{
                                "type": "TEXT",
                                "text": "' || REPLACE(REPLACE(l_prompt, '"', '\"'), CHR(10), '\n') || '"
                            }]
                        }],
                        "apiFormat": "GENERIC",
                        "maxTokens": 2048,
                        "temperature": ' || TO_CHAR(l_temperature) || ',
                        "topP": ' || TO_CHAR(l_top_p, 'FM9990.00') || ',
                        "topK": ' || TO_CHAR(l_top_k, 'FM9990') || ',
                        "frequencyPenalty": ' || TO_CHAR(l_frequency_penalty, 'FM9990.00') || ',
                        "presencePenalty": ' || TO_CHAR(l_presence_penalty, 'FM9990.00') || '
                    }
                }';
            ELSE
                raise_application_error(-20003, 'Unsupported API format: ' || l_api_format);
            END IF;

            FOR i IN 0..CEIL(DBMS_LOB.GETLENGTH(l_payload)/4000) - 1 LOOP
                apex_debug.message('📤 Payload part %s: %s', i+1, DBMS_LOB.SUBSTR(l_payload, 4000, i * 4000 + 1));
            END LOOP;
            l_response_struct := dbms_cloud.send_request(credential_name => 'OCI$RESOURCE_PRINCIPAL', uri => l_reasoning_endpoint, method => 'POST', headers => JSON_OBJECT('Content-Type' VALUE 'application/json'), body => utl_raw.cast_to_raw(l_payload));

            v_response := dbms_cloud.get_response_text(l_response_struct);
            apex_debug.message('🤖 GenAI raw SQL response: %s', substr(v_response, 1, 4000));
            l_resp_obj := json_object_t.parse(v_response);
            IF l_resp_obj.has('chatResponse') THEN
                DECLARE
                    l_chat_response JSON_OBJECT_T := l_resp_obj.get_object('chatResponse');
                    l_text_raw      CLOB;
                    l_sql_block     CLOB;
                    l_start_pos     PLS_INTEGER;
                    l_end_pos       PLS_INTEGER;
                BEGIN
                    -- Try direct path: chatResponse.text
                    IF l_chat_response.has('text') THEN
                        BEGIN
                            l_text_raw := l_chat_response.get_string('text');
                        EXCEPTION
                            WHEN OTHERS THEN
                                l_text_raw := NULL; -- Graceful fallback if unexpected type
                        END;
                    END IF;

                    -- If empty, try fallback path: chatResponse.choices[0].message.content[0].text
                    IF l_text_raw IS NULL OR TRIM(l_text_raw) IS NULL THEN
                        BEGIN
                            DECLARE
                                l_choices_arr  JSON_ARRAY_T;
                                l_first_choice JSON_OBJECT_T;
                                l_message_obj  JSON_OBJECT_T;
                                l_content_arr  JSON_ARRAY_T;
                                l_text_obj     JSON_OBJECT_T;
                            BEGIN
                                l_choices_arr := l_chat_response.get_array('choices');
                                l_first_choice := TREAT(l_choices_arr.get(0) AS JSON_OBJECT_T);
                                l_message_obj := TREAT(l_first_choice.get('message') AS JSON_OBJECT_T);
                                l_content_arr := TREAT(l_message_obj.get('content') AS JSON_ARRAY_T);
                                l_text_obj := TREAT(l_content_arr.get(0) AS JSON_OBJECT_T);
                                l_text_raw := l_text_obj.get_string('text');
                            EXCEPTION
                                WHEN OTHERS THEN
                                    apex_debug.message('❌ Could not extract fallback chatResponse.choices path: %s', SQLERRM);
                                    v_last_failed := 'Y';
                                    CONTINUE;
                            END;
                        END;
                    END IF;

                    -- Now extract SQL from l_text_raw
                    l_start_pos := instr(l_text_raw, '```sql');
                    IF l_start_pos > 0 THEN
                        l_text_raw := substr(l_text_raw, l_start_pos + 6); -- Skip past ```sql
                    END IF;

                    l_end_pos := instr(l_text_raw, '```');
                    IF l_end_pos > 0 THEN
                        l_sql_block := substr(l_text_raw, 1, l_end_pos - 1);
                    ELSE
                        l_sql_block := l_text_raw;
                    END IF;

                    -- Cleanup
                    v_response_sql := regexp_replace(trim(l_sql_block), ';[[:space:]]*$', '');
                    apex_debug.message('✅ Extracted SQL: %s', substr(v_response_sql, 1, 1000));
                END;
            ELSE
                apex_debug.message('❌ chatResponse not found');
                v_last_failed := 'Y';
                CONTINUE;
            END IF;

            -- Validate SQL against DB
            l_sql_body := rtrim(v_response_sql, ';');
            l_sql := 'SELECT * FROM ('
                     || l_sql_body
                     || ') WHERE ROWNUM = 1';
            l_cursor := dbms_sql.open_cursor;
            dbms_sql.parse(l_cursor, l_sql, dbms_sql.native);
            dbms_sql.describe_columns(l_cursor, l_col_count, l_desc_tab);
            FOR i IN 1..l_col_count LOOP
                dbms_sql.define_column(l_cursor, i, l_value, 4000);
            END LOOP;

            l_status := dbms_sql.execute(l_cursor);
            IF dbms_sql.fetch_rows(l_cursor) > 0 THEN
                FOR i IN 1..l_col_count LOOP
                    dbms_sql.column_value(l_cursor, i, l_value);
                    IF l_value IS NOT NULL THEN
                        l_has_data := TRUE;
                        EXIT;
                    END IF;
                END LOOP;
            END IF;

            dbms_sql.close_cursor(l_cursor);
            IF l_has_data THEN
                apex_debug.message('🟢 SQL validation passed. Logging and summarizing.');
                v_last_failed := 'N';

                -- 🔁 Extract JSON from the SQL results
                DECLARE
                    l_json_result CLOB := '[';
                    l_cnt         INTEGER := 0;
                BEGIN
                    l_cursor := dbms_sql.open_cursor;
                    dbms_sql.parse(l_cursor, 'SELECT * FROM ('
                                             || v_response_sql
                                             || ') WHERE ROWNUM <= 50', dbms_sql.native);

                    dbms_sql.describe_columns(l_cursor, l_col_count, l_desc_tab);
                    FOR i IN 1..l_col_count LOOP
                        dbms_sql.define_column(l_cursor, i, l_value, 4000);
                    END LOOP;

                    l_status := dbms_sql.execute(l_cursor);
                    WHILE dbms_sql.fetch_rows(l_cursor) > 0 LOOP
                        l_cnt := l_cnt + 1;
                        l_json_result := l_json_result
                                         ||
                            CASE
                                WHEN l_cnt > 1 THEN
                                    ','
                                ELSE ''
                            END
                                         || '{';

                        FOR i IN 1..l_col_count LOOP
                            dbms_sql.column_value(l_cursor, i, l_value);
                            l_json_result := l_json_result
                                             || '"'
                                             || replace(l_desc_tab(i).col_name, '"', '')
                                             || '":"'
                                             || replace(l_value, '"', '\"')
                                             || '"'
                                             || CASE
                                WHEN i < l_col_count THEN
                                    ','
                                ELSE ''
                            END;

                        END LOOP;

                        l_json_result := l_json_result || '}';
                        EXIT WHEN l_cnt >= 50;
                    END LOOP;

                    l_json_result := l_json_result || ']';
                    p_final_aimessage := l_json_result;
                    apex_debug.message('📦 AIMESSAGE: %s', substr(l_json_result, 1, 1000));
                    dbms_sql.close_cursor(l_cursor);
                EXCEPTION
                    WHEN OTHERS THEN
                        IF dbms_sql.is_open(l_cursor) THEN
                            dbms_sql.close_cursor(l_cursor);
                        END IF;
                        apex_debug.message('⚠️ Failed to build AIMESSAGE JSON: %s', sqlerrm);
                        p_final_aimessage := '[]';
                END;

                -- 🔐 Log and summarize
                INSERT INTO ai_chat_log (
                    chat_id,
                    app_user,
                    session_id,
                    user_message,
                    generated_sql,
                    execution_data,
                    raw_response
                ) VALUES (
                    p_chat_id,
                    p_app_user,
                    p_app_session,
                    l_input,
                    v_response_sql,
                    p_final_aimessage,
                    v_response
                ) RETURNING id INTO v_log_row_id;

                UPDATE ai_chat_log_reasoning
                SET
                    log_id = v_log_row_id
                WHERE
                        chat_id = p_chat_id
                    AND log_id IS NULL;

                p_row_id := v_log_row_id;
                p_final_sql := v_response_sql;
                p_final_response := v_response;
                -- 🧠 Run summarization
                BEGIN
                    v_summary_prompt := 'You are a helpful financial data analyst. Format summaries clearly using these sections:\n- Overview\n- Details\n- Totals\n- Observations\nUse plain text, line breaks, and bullet points. Here is the data to analyze:';
                    l_input_text := v_summary_prompt
                                    || chr(10)
                                    || chr(10)
                                    || p_final_aimessage;

                    IF l_api_format = 'COHERE' THEN
                        l_payload := '{
                            "compartmentId": "' || p_compartment_id || '",
                            "servingMode": {
                                "modelId": "' || l_model_id || '", 
                                "servingType": "ON_DEMAND"}, 
                            "chatRequest": {
                                "apiFormat": "COHERE",
                                "maxTokens": 2048,
                                "frequencyPenalty": ' || TO_CHAR(l_frequency_penalty, 'FM9990.00') || ',
                                "presencePenalty": ' || TO_CHAR(l_presence_penalty, 'FM9990.00') || ',
                                "temperature": ' || TO_CHAR(l_temperature, 'FM9990.00') || ',
                                "topP": ' || TO_CHAR(l_top_p, 'FM9990.00') || ',
                                "topK": ' || TO_CHAR(l_top_k, 'FM9990') || ',
                                "message": "' || replace(replace(l_input_text, '"', '\"'), chr(10), '\n') || '" 
                            }
                        }';
                    ELSIF l_api_format = 'GENERIC' THEN
                        l_payload := '{
                            "compartmentId": "' || p_compartment_id || '",
                            "servingMode": {
                                "modelId": "' || l_model_id || '",
                                "servingType": "ON_DEMAND"
                            },
                            "chatRequest": {
                                "messages": [{
                                    "role": "USER",
                                    "content": [{
                                        "type": "TEXT",
                                        "text": "' || REPLACE(REPLACE(l_input_text, '"', '\"'), CHR(10), '\n') || '"
                                    }]
                                }],
                                "apiFormat": "GENERIC",
                                "maxTokens": 2048,
                                "isStream": false,
                                "numGenerations": 1,
                                "temperature": ' || TO_CHAR(l_temperature) || ',
                                "topP": ' || TO_CHAR(l_top_p, 'FM9990.00') || ',
                                "topK": ' || TO_CHAR(l_top_k, 'FM9990') || ',
                                "frequencyPenalty": ' || TO_CHAR(l_frequency_penalty, 'FM9990.00') || ',
                                "presencePenalty": ' || TO_CHAR(l_presence_penalty, 'FM9990.00') || '
                            }
                        }';
                    ELSE
                        raise_application_error(-20004, 'Unsupported API format in summary: ' || l_api_format);
                    END IF;

                    l_response_struct := dbms_cloud.send_request(credential_name => 'OCI$RESOURCE_PRINCIPAL', uri => l_reasoning_endpoint, method => 'POST', headers => JSON_OBJECT('Content-Type' VALUE 'application/json'), body => utl_raw.cast_to_raw(l_payload));
                    l_reasoning_response := dbms_cloud.get_response_text(l_response_struct);
                    l_resp_obj := json_object_t.parse(l_reasoning_response);
                    IF l_resp_obj.has('chatResponse') THEN
                        DECLARE
                            l_chat_response JSON_OBJECT_T := l_resp_obj.get_object('chatResponse');
                            l_choices_arr   JSON_ARRAY_T;
                            l_first_choice  JSON_OBJECT_T;
                            l_message_obj   JSON_OBJECT_T;
                            l_content_arr   JSON_ARRAY_T;
                            l_text_obj      JSON_OBJECT_T;
                        BEGIN
                            -- Default: NULL
                            v_summary_text := NULL;

                            -- Try direct path
                            IF l_chat_response.has('text') THEN
                                BEGIN
                                    v_summary_text := l_chat_response.get_string('text');
                                EXCEPTION
                                    WHEN OTHERS THEN
                                        v_summary_text := NULL;
                                END;
                            END IF;

                            -- Fallback if text is NULL or empty
                            IF v_summary_text IS NULL OR TRIM(v_summary_text) IS NULL THEN
                                BEGIN
                                    l_choices_arr := l_chat_response.get_array('choices');
                                    l_first_choice := TREAT(l_choices_arr.get(0) AS JSON_OBJECT_T);
                                    l_message_obj := TREAT(l_first_choice.get('message') AS JSON_OBJECT_T);
                                    l_content_arr := TREAT(l_message_obj.get('content') AS JSON_ARRAY_T);
                                    l_text_obj := TREAT(l_content_arr.get(0) AS JSON_OBJECT_T);
                                    v_summary_text := l_text_obj.get_string('text');
                                EXCEPTION
                                    WHEN OTHERS THEN
                                        apex_debug.message('❌ Failed to extract summary_text from fallback: %s', SQLERRM);
                                        v_summary_text := NULL;
                                END;
                            END IF;

                            -- ✅ Debug output of the extracted summary text
                            apex_debug.message('📋 Extracted summary_text: %s', SUBSTR(v_summary_text, 1, 4000));

                            -- Save result if something was found
                            IF v_summary_text IS NOT NULL THEN
                                UPDATE ai_chat_log
                                SET
                                    summary_text = v_summary_text,
                                    reasoned_message = v_reasoned_message
                                WHERE
                                    id = v_log_row_id;

                                apex_debug.message('📊 Summary stored.');
                            ELSE
                                apex_debug.message('⚠️ No summary text found to store.');
                            END IF;
                        END;
                    END IF;

                EXCEPTION
                    WHEN OTHERS THEN
                        apex_debug.message('❗ Summary generation failed: %s', sqlerrm);
                END;

                EXIT;
            ELSE
                apex_debug.message('⚠️ SQL produced no results.');
                v_last_failed := 'Y';
            END IF;

        EXCEPTION
            WHEN OTHERS THEN
                apex_debug.message('🔥 Exception in GenAI SQL section: %s', sqlerrm);
        END;

        IF
            v_last_failed = 'Y'
            AND v_attempt < v_max_attempts
        THEN
            apex_debug.message('♻️ Triggering GenAI rephrasing');
            l_input_text := nvl(v_reasoned_message, p_user_message);
            l_prompt := 'Rephrase the following business question by replacing informal IT terms with their corresponding enterprise equivalents used in the database. Preserve the original structure, intent, and meaning. Respond only with the rephrased question.';
            IF l_api_format = 'COHERE' THEN
                l_payload := '{
                    "compartmentId": "' || p_compartment_id || '",
                    "servingMode": {
                        "modelId": "' || l_model_id || '",
                        "servingType": "ON_DEMAND"
                    },
                    "chatRequest": {
                        "apiFormat": "COHERE",
                        "maxTokens": 2048,
                        "frequencyPenalty": ' || TO_CHAR(l_frequency_penalty, 'FM9990.00') || ',
                        "presencePenalty": ' || TO_CHAR(l_presence_penalty, 'FM9990.00') || ',
                        "temperature": ' || TO_CHAR(l_temperature, 'FM9990.00') || ',
                        "topP": ' || TO_CHAR(l_top_p, 'FM9990.00') || ',
                        "topK": ' || TO_CHAR(l_top_k, 'FM9990') || ',
                        "message": "' || REPLACE(REPLACE(l_prompt || CHR(10) || l_input_text, '"', '\"'), CHR(10), '\n') || '"
                    }
                }';
            ELSIF l_api_format = 'GENERIC' THEN
                l_payload := '{
                    "compartmentId": "' || p_compartment_id || '",
                    "servingMode": {
                        "modelId": "' || l_model_id || '",
                        "servingType": "ON_DEMAND"
                    },
                    "chatRequest": {
                        "messages": [{
                            "role": "USER",
                            "content": [{
                                "type": "TEXT",
                                "text": "' || REPLACE(REPLACE(l_prompt || CHR(10) || l_input_text, '"', '\"'), CHR(10), '\n') || '"
                            }]
                        }],
                        "apiFormat": "GENERIC",
                        "maxTokens": 2048,
                        "isStream": false,
                        "numGenerations": 1,
                        "temperature": ' || TO_CHAR(l_temperature) || ',
                        "topP": ' || TO_CHAR(l_top_p, 'FM9990.00') || ',
                        "topK": ' || TO_CHAR(l_top_k, 'FM9990') || ',
                        "frequencyPenalty": ' || TO_CHAR(l_frequency_penalty, 'FM9990.00') || ',
                        "presencePenalty": ' || TO_CHAR(l_presence_penalty, 'FM9990.00') || '
                    }
                }';
            ELSE
                raise_application_error(-20005, 'Unsupported API format in rephrasing: ' || l_api_format);
            END IF;
            l_response_struct := dbms_cloud.send_request(credential_name => 'OCI$RESOURCE_PRINCIPAL', uri => l_reasoning_endpoint, method => 'POST', headers => JSON_OBJECT('Content-Type' VALUE 'application/json'), body => utl_raw.cast_to_raw(l_payload));
            l_reasoning_response := dbms_cloud.get_response_text(l_response_struct);
            l_resp_obj := json_object_t.parse(l_reasoning_response);
            IF l_resp_obj.has('chatResponse') THEN
                DECLARE
                    l_chat_response   JSON_OBJECT_T := l_resp_obj.get_object('chatResponse');
                    l_choices_arr     JSON_ARRAY_T;
                    l_first_choice    JSON_OBJECT_T;
                    l_message_obj     JSON_OBJECT_T;
                    l_content_arr     JSON_ARRAY_T;
                    l_text_obj        JSON_OBJECT_T;
                    l_result_text     CLOB;
                BEGIN
                    -- Try direct chatResponse.text
                    IF l_chat_response.has('text') THEN
                        BEGIN
                            l_result_text := l_chat_response.get_string('text');
                        EXCEPTION
                            WHEN OTHERS THEN
                                l_result_text := NULL;
                        END;
                    END IF;

                    -- Fallback to choices[0].message.content[0].text
                    IF l_result_text IS NULL OR TRIM(l_result_text) IS NULL THEN
                        BEGIN
                            l_choices_arr := l_chat_response.get_array('choices');
                            l_first_choice := TREAT(l_choices_arr.get(0) AS JSON_OBJECT_T);
                            l_message_obj := TREAT(l_first_choice.get('message') AS JSON_OBJECT_T);
                            l_content_arr := TREAT(l_message_obj.get('content') AS JSON_ARRAY_T);
                            l_text_obj := TREAT(l_content_arr.get(0) AS JSON_OBJECT_T);
                            l_result_text := l_text_obj.get_string('text');
                        EXCEPTION
                            WHEN OTHERS THEN
                                apex_debug.message('❌ Failed to extract rephrased text from fallback: %s', SQLERRM);
                                l_result_text := NULL;
                        END;
                    END IF;

                    -- Store result
                    v_reasoned_message := l_result_text;

                    INSERT INTO ai_chat_log_reasoning (
                        chat_id,
                        log_id,
                        input_message,
                        rephrased_output,
                        attempt_number,
                        app_user,
                        created_at
                    ) VALUES (
                        p_chat_id,
                        NULL,
                        l_input_text,
                        l_result_text,
                        v_attempt,
                        p_app_user,
                        SYSTIMESTAMP
                    ) RETURNING id INTO v_reasoning_row_id;

                    apex_debug.message('📝 Rephrased: %s', l_result_text);
                END;
            ELSE
                apex_debug.message('❌ Rephrasing failed: chatResponse not found');
            END IF;

        ELSE
            EXIT WHEN v_attempt >= v_max_attempts;
        END IF;

    END LOOP;

    IF v_last_failed = 'Y' THEN
        apex_debug.message('🛑 Final failure after %s attempts', v_attempt);
        raise_application_error(-20010, 'All AI attempts failed to generate a working SQL query.');
    END IF;

    apex_debug.message('✅ Procedure completed');
END;


/


-- Cohere
/*INSERT INTO ai_model_config VALUES (
    'ocid1.generativeaimodel.oc1.eu-frankfurt-1.amaaaaaask7dceyaaypm2hg4db3evqkmjfdli5mggcxrhp2i4qmhvggyb4ja', 'cohere.command-a-03-2025', 'COHERE', 'Y', 'eu-frankfurt-1', 0.75, 0.7, 1, 1.0, 0
);

-- LLaMA
INSERT INTO ai_model_config VALUES (
    'ocid1.generativeaimodel.oc1.eu-frankfurt-1.amaaaaaask7dceya4tdabclcsqbc3yj2mozvvqoq5ccmliv3354hfu3mx6bq', 'meta.llama-3.3-70b-instruct', 'GENERIC', 'N', 'eu-frankfurt-1',1.0, 1.0, 1, 0, 0
);*/

INSERT INTO AI_PROMPT_COMPONENTS (component_type, content)
VALUES (
  'INSTRUCTION',
  'You are an expert in translating natural language cost and usage questions into Oracle SQL, using data from the tables: 
- COST_USAGE_TIMESERIES_DAILY 
- OCI_AVAILABILITY_METRICS_PY. 

These tables contain detailed OCI cost, usage and availability information, including service names, usage units, resource types, charge descriptions, resource display names, and compartment hierarchy. Use table aliases as follows: 
- c for COST_USAGE_TIMESERIES_DAILY 
- a for OCI_AVAILABILITY_METRICS_PY. 

Always use case-insensitive pattern matching (LIKE ''%...%'') for any text-based filter. Never use the equals sign (=) for string comparisons. This applies to filters on: 
- Service names 
- Service categories 
- Charge descriptions 
- Resource types 
- Resource display names 
- Usage units 
- Compartment names 
- Compartment paths. 

The correct format for all text filters is: UPPER(column_name) LIKE UPPER(''%value%''). 

If a user provides a general keyword (e.g., ''TEE'', ''AI'', ''OCPU'', ''DATABASE''), and it''s not clear which field it maps to, search for it across all of the following columns using OR: 
From COST_USAGE_TIMESERIES_DAILY (c): 
- SERVICECATEGORY 
- SERVICENAME 
- RESOURCETYPE 
- RESOURCENAME
- CHARGEDESCRIPTION
- OCI_COMPARTMENTNAME
- OCI_COMPARTMENT_PATH
- USAGEUNIT. 
From OCI_AVAILABILITY_METRICS_PY (a): 
- RESOURCEDISPLAYNAME
- NAMESPACE
- METRIC_NAME. 

Example WHERE clause for such a keyword: 
- For COST_USAGE_TIMESERIES_DAILY (c):
WHERE UPPER(c.USAGEUNIT) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(c.SERVICECATEGORY) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(c.SERVICENAME) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(c.RESOURCETYPE) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(c.RESOURCENAME) LIKE UPPER(''%KEYWORD%'')
  OR UPPER(c.CHARGEDESCRIPTION) LIKE UPPER(''%KEYWORD%'')
  OR UPPER(c.OCI_COMPARTMENTNAME) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(c.OCI_COMPARTMENT_PATH) LIKE UPPER(''%KEYWORD%'')
  OR UPPER(c.USAGEUNIT) LIKE UPPER(''%KEYWORD%'').
- For OCI_AVAILABILITY_METRICS_PY (a):
WHERE UPPER(a.RESOURCEDISPLAYNAME) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(a.NAMESPACE) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(a.METRIC_NAME) LIKE UPPER(''%KEYWORD%''). 

For date filtering: 
- For COST_USAGE_TIMESERIES_DAILY (c), DATE_BUCKET contains daily aggregated data.
- If the user does not specify a date range, default to: c.DATE_BUCKET = TRUNC(ADD_MONTHS(SYSDATE, -1), ''MM''). 
- For rolling periods (e.g., ''last 3 months''), use: SYSTIMESTAMP - INTERVAL ''3'' MONTH. 

When grouping results, use exact same as select. As an example if we have in select something like TO_CHAR(column_a) then in group we must have TO_CHAR(column_a). 

When reporting on currency, do not use a currency symbol. 

For compute availability metrics, 0 is healthy and any value not 0 is considered as unhealthy with 1 being complete unavailability for the time period reported. 

Summary of rules:
- Use LIKE ''%value%'' for all string comparisons.
- Wrap all string filters with UPPER(...) for case-insensitivity.
- Never use = for text fields.
- Use OR-based searches across multiple columns for general keywords.
- Default to last month if no date is specified.
- Use DATE_BUCKET for date filtering.
- Group by the exact expression used in SELECT (e.g., TO_CHAR(...)).
- Do not use currency symbols in reports.
- Compute availability metrics: 0 = healthy, >0 and <1 = partial unavailability, 1 = fully unavailable.'
);

INSERT INTO AI_PROMPT_COMPONENTS (component_type, content)
VALUES (
  'SCHEMA',
  'CREATE TABLE ""USAGE"".""OCI_AVAILABILITY_METRICS_PY"" 
(
    ""RESOURCEDISPLAYNAME"" VARCHAR2(64 BYTE), 
    ""TIMESTAMP"" TIMESTAMP (6), 
    ""NAMESPACE"" VARCHAR2(64 BYTE), 
    ""COMPARTMENT_ID"" VARCHAR2(256 BYTE), 
    ""VALUE"" NUMBER, 
    ""METRIC_NAME"" VARCHAR2(128 BYTE)
);

CREATE TABLE COST_USAGE_TIMESERIES_DAILY 
(
  DATE_BUCKET DATE 
, BILLINGACCOUNTID VARCHAR2(200 BYTE) 
, SUBACCOUNTNAME VARCHAR2(200 BYTE) 
, INVOICEISSUER VARCHAR2(200 BYTE) 
, REGION VARCHAR2(100 BYTE) 
, BILLINGCURRENCY VARCHAR2(20 BYTE) 
, SERVICECATEGORY VARCHAR2(200 BYTE) 
, SERVICENAME VARCHAR2(200 BYTE) 
, CHARGEDESCRIPTION VARCHAR2(400 BYTE) 
, RESOURCETYPE VARCHAR2(200 BYTE) 
, RESOURCEID VARCHAR2(400 BYTE) 
, SKUID VARCHAR2(200 BYTE) 
, PRICINGUNIT VARCHAR2(100 BYTE) 
, OCI_COMPARTMENTID VARCHAR2(400 BYTE) 
, OCI_COMPARTMENTNAME VARCHAR2(400 BYTE) 
, USAGEUNIT VARCHAR2(100 BYTE) 
, COST NUMBER(20, 6) 
, USAGE NUMBER(20, 6) 
, RESOURCENAME VARCHAR2(1000 BYTE) 
, OCI_COMPARTMENT_PATH VARCHAR2(4000 BYTE) 
); '
);

INSERT INTO AI_PROMPT_COMPONENTS (component_type, content)
VALUES ('TABLE_DESCRIPTIONS', 'Table COST_USAGE_TIMESERIES_DAILY contains OCI cost and usage data, including:
- DATE_BUCKET: Aggregated date based on daily granularity (e.g., 01-MAY-2025)
- BILLINGACCOUNTID: OCI billing account ID
- SUBACCOUNTNAME: Subaccount under the billing account
- INVOICEISSUER: Entity issuing the invoice (e.g., Oracle America)
- REGION: OCI region where the usage occurred
- BILLINGCURRENCY: Currency used for billing (e.g., USD, EUR)
- SERVICECATEGORY: Broad OCI service category (e.g., Compute, Storage, Database). Always use Camel Case
- SERVICENAME: Specific service name (e.g., BLOCK_STORAGE, COMPUTE, LOGGING, DATABASE). Always use capitals
- CHARGEDESCRIPTION: Description of the charge or SKU (e.g., Logging - Storage, Database Exadata - OCPU - BYOL)
- RESOURCETYPE: Type of resource (e.g., instance, bootvolume, vmcluster, vnic, log). Always use lower case
- RESOURCEID: Unique identifier for the OCI resource
- SKUID: Identifier of the pricing unit or SKU
- PRICINGUNIT: Pricing unit (e.g., PER_HOUR, PER_GB)
- OCI_COMPARTMENTID: Identifier of the compartment
- OCI_COMPARTMENTNAME: Name of the compartment
- USAGEUNIT: Unit of resource usage (e.g., OCPU, GB, HOUR)
- COST: Cost incurred for the usage (numeric)
- USAGE: Quantity of usage (numeric)
- RESOURCENAME: Display name of the resource, if available
- OCI_COMPARTMENT_PATH: Full hierarchy path of the compartment

Table OCI_AVAILABILITY_METRICS_PY contains availability metrics for various OCI resources:
- RESOURCEDISPLAYNAME: Human-readable name of the OCI resource
- TIMESTAMP: Time when the metric was recorded
- NAMESPACE: Metric category (e.g., oci_computeagent, oci_logging)
- COMPARTMENT_ID: Compartment where the resource is located
- VALUE: Reported value of the availability metric
- METRIC_NAME: Specific name of the metric within the namespace (e.g., CpuUtilization, MemoryAvailable)');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (1, 'Show me how much have we spent for AI last two months', 
'SELECT SUM(c.COST) AS TOTAL_COST
FROM COST_USAGE_TIMESERIES c
WHERE (
  UPPER(c.SERVICECATEGORY) LIKE UPPER(''%AI%'') OR
  UPPER(c.SERVICENAME) LIKE UPPER(''%AI%'') OR
  UPPER(c.RESOURCETYPE) LIKE UPPER(''%AI%'') OR
  UPPER(c.RESOURCENAME) LIKE UPPER(''%AI%'') OR
  UPPER(c.CHARGEDESCRIPTION) LIKE UPPER(''%AI%'') OR
  UPPER(c.OCI_COMPARTMENTNAME) LIKE UPPER(''%AI%'') OR
  UPPER(c.OCI_COMPARTMENT_PATH) LIKE UPPER(''%AI%'') OR
  UPPER(c.USAGEUNIT) LIKE UPPER(''%AI%'')
)
AND c.DATE_BUCKET >= TRUNC(ADD_MONTHS(SYSDATE, -2), ''MM'');');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (2, 'How many E5 OCPUs have been consumed in April 2025', 
'SELECT SUM(c.USAGE) AS TOTAL_USAGE
FROM COST_USAGE_TIMESERIES c
WHERE UPPER(c.SERVICECATEGORY) LIKE UPPER(''%Compute%'')
  AND UPPER(c.CHARGEDESCRIPTION) LIKE UPPER(''%E5%'')
  AND TO_CHAR(c.DATE_BUCKET, ''YYYY-MM'') = ''2025-04'';');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (3, 'Which compartments had the highest cost in April 2025?', 
'SELECT c.OCI_COMPARTMENTNAME AS COMPARTMENT_NAME,
       SUM(c.COST) AS TOTAL_COST
FROM COST_USAGE_TIMESERIES c
WHERE TO_CHAR(c.DATE_BUCKET, ''YYYY-MM'') = ''2025-04''
GROUP BY c.OCI_COMPARTMENTNAME
ORDER BY TOTAL_COST DESC;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (4, 'Top 5 services by cost last month', 
'SELECT c.SERVICENAME,
       ROUND(SUM(c.COST),1) AS TOTAL_COST
FROM COST_USAGE_TIMESERIES_DAILY c
WHERE c.DATE_BUCKET >= TRUNC(ADD_MONTHS(SYSDATE, -1), ''MM'')
  AND c.DATE_BUCKET < TRUNC(SYSDATE, ''MM'')
GROUP BY c.SERVICENAME
ORDER BY TOTAL_COST DESC
FETCH FIRST 5 ROWS ONLY;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (5, 'What was the total usage in GB for Object Storage in March 2025', 
'SELECT 
  SUM(c.USAGE) / TO_NUMBER(LAST_DAY(DATE ''2025-06-01'') - DATE ''2025-06-01'' + 1) AS "TOTAL_USAGE"
FROM COST_USAGE_TIMESERIES_DAILY c
WHERE UPPER(c.CHARGEDESCRIPTION) LIKE UPPER(''%Object Storage%'')
  AND UPPER(c.USAGEUNIT) LIKE UPPER(''%GB%'')
  AND TO_CHAR(c.DATE_BUCKET, ''YYYY-MM'') = ''2025-06'';');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (6, 'Show monthly total cost for the last 3 months', 
'SELECT TO_CHAR(c.DATE_BUCKET, ''YYYY-MM'') AS MONTH,
       SUM(c.COST) AS TOTAL_COST
FROM COST_USAGE_TIMESERIES_DAILY c
WHERE c.DATE_BUCKET >= TRUNC(ADD_MONTHS(SYSDATE, -3), ''MM'')
GROUP BY TO_CHAR(c.DATE_BUCKET, ''YYYY-MM'')
ORDER BY MONTH DESC;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (7, 'How much did we spend on Block Volume in the last month?', 
'SELECT SUM(c.COST) AS TOTAL_COST
FROM COST_USAGE_TIMESERIES_DAILY c
WHERE UPPER(c.CHARGEDESCRIPTION) LIKE UPPER(''%Block Volume%'')
  AND c.DATE_BUCKET >= TRUNC(ADD_MONTHS(SYSDATE, -1), ''MM'')
  AND c.DATE_BUCKET < TRUNC(SYSDATE, ''MM'');');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (8, 'List the top 5 compartments by compute cost in the last two months', 
'SELECT c.OCI_COMPARTMENTNAME AS COMPARTMENT_NAME,
       SUM(c.COST) AS TOTAL_COST
FROM COST_USAGE_TIMESERIES_DAILY c
WHERE UPPER(c.SERVICECATEGORY) LIKE UPPER(''%Compute%'')
  AND c.DATE_BUCKET >= TRUNC(ADD_MONTHS(SYSDATE, -2), ''MM'')
GROUP BY c.OCI_COMPARTMENTNAME
ORDER BY TOTAL_COST DESC
FETCH FIRST 5 ROWS ONLY;');

commit;