-- Andre 26/06/2025
-- Create OCI AI Settings. Tables, Procedures etc
CREATE TABLE AI_PROMPT_COMPONENTS (
    id              NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    component_type  VARCHAR2(50), -- e.g., 'INSTRUCTION', 'SCHEMA', 'TABLE_DESCRIPTIONS'
    content         CLOB,
    updated_at      TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE AI_PROMPT_EXAMPLES (
    id              NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    example_order   NUMBER, -- used for ordering
    user_question   VARCHAR2(1000),
    oracle_sql      CLOB,
    updated_at      TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE ai_model_config (
    model_id          VARCHAR2(100),
    model_name        VARCHAR2(100), -- e.g., 'Cohere', 'Llama'
    api_format        VARCHAR2(50),  -- 'COHERE' or 'GENERIC'
    is_default        VARCHAR2(1),   -- 'Y' for default
    temperature       NUMBER,
    top_p             NUMBER,
    top_k             NUMBER,
    frequency_penalty NUMBER,
    presence_penalty  NUMBER
);

-- Cohere
INSERT INTO ai_model_config VALUES (
    'cohere.command-a-03-2025', 'Cohere', 'COHERE', 'Y', 0.75, 0.7, 1, 1.0, 0
);

-- LLaMA
INSERT INTO ai_model_config VALUES (
    'meta.llama-3-70b-instruct', 'Llama', 'GENERIC', 'N', 1.0, 1.0, 1, 0, 0
);

INSERT INTO AI_PROMPT_COMPONENTS (component_type, content)
VALUES (
  'INSTRUCTION',
  'You are an expert in translating natural language cost and usage questions into Oracle SQL, using data from the tables: 
- FOCUS_REPORTS_PY 
- OCI_COMPARTMENTS_PY 
- OCI_RESOURCES_PY. 

These tables contain detailed OCI cost and usage information, including service names, usage units, resource types, charge descriptions, resource display names, and compartment hierarchy. Use table aliases as follows: 
- f for FOCUS_REPORTS_PY 
- c for OCI_COMPARTMENTS_PY 
- r for OCI_RESOURCES_PY. 

Always use case-insensitive pattern matching (LIKE ''%...%'') for any text-based filter. Never use the equals sign (=) for string comparisons. This applies to filters on: 
- Service names 
- Service categories 
- Charge descriptions 
- Resource types 
- Resource display names 
- Usage units 
- Compartment names 
- Compartment paths. 

The correct format for all text filters is: UPPER(column_name) LIKE UPPER(''%value%''). 

If a user provides a general keyword (e.g., ''TEE'', ''AI'', ''OCPU'', ''DATABASE''), and it''s not clear which field it maps to, search for it across all of the following columns using OR: 
From FOCUS_REPORTS_PY (f): 
- USAGEUNIT 
- SERVICECATEGORY 
- SERVICENAME 
- RESOURCETYPE 
- CHARGEDESCRIPTION. 
From OCI_RESOURCES_PY (r): 
- DISPLAY_NAME. 
From OCI_COMPARTMENTS_PY (c): 
- NAME 
- PATH. 

Example WHERE clause for such a keyword: 
WHERE UPPER(f.USAGEUNIT) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(f.SERVICECATEGORY) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(f.SERVICENAME) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(f.RESOURCETYPE) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(f.CHARGEDESCRIPTION) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(c.NAME) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(c.PATH) LIKE UPPER(''%KEYWORD%'') 
  OR UPPER(r.DISPLAY_NAME) LIKE UPPER(''%KEYWORD%''). 

For date filtering: 
- Use TO_CHAR(f.BILLINGPERIODSTART, ''YYYY-MM'') for specific months (e.g., ''April 2025''). 
- If the user does not specify a date range, default to: f.BILLINGPERIODSTART = TRUNC(ADD_MONTHS(SYSDATE, -1), ''MM''). 
- For rolling periods (e.g., ''last 3 months''), use: SYSTIMESTAMP - INTERVAL ''3'' MONTH. 

Use LEFT JOINs when needed: 
- Join OCI_COMPARTMENTS_PY (c) for compartment names or paths. 
- Join OCI_RESOURCES_PY (r) for resource display names. 

When grouping results, use raw column names only. Do not apply functions like TRUNC, TO_DATE, or TO_CHAR inside the GROUP BY clause. 

When reporting on currency, use Euro (€) not dollars ($). 

For compute availability metrics, 0 is healthy and any value not 0 is considered as unhealthy with 1 being complete unavailability for the time period reported. 

Summary of rules: 
- Use LIKE ''%value%'' for all string comparisons. 
- Wrap all string filters with UPPER(...) for case-insensitivity. 
- Never use = for text fields. 
- Use OR-based searches across multiple columns for general keywords. 
- Default to last month if no date is specified. 
- Always use LEFT JOINs for compartments and resources. 
- Group by plain column names only, without functions. 
- Use Euro (€) currency. 
- Compute availability metrics: 0 means healthy, >0 and <1 some unavailability, 1 complete unavailability.'
);

INSERT INTO AI_PROMPT_COMPONENTS (component_type, content)
VALUES (
  'SCHEMA',
  'CREATE TABLE FOCUS_REPORTS_PY (
    BILLINGPERIODSTART DATE,
    BILLINGACCOUNTID VARCHAR2(100),
    EFFECTIVECOST NUMBER,
    USAGEQUANTITY NUMBER,
    USAGEUNIT VARCHAR2(50),
    SERVICECATEGORY VARCHAR2(100),
    SERVICENAME VARCHAR2(100),
    RESOURCEID VARCHAR2(100),
    RESOURCETYPE VARCHAR2(100),
    CHARGEDESCRIPTION VARCHAR2(200),
    OCI_COMPARTMENTID VARCHAR2(100)
);

CREATE TABLE OCI_RESOURCES_PY (
    IDENTIFIER VARCHAR2(100),
    DISPLAY_NAME VARCHAR2(200)
);

CREATE TABLE OCI_COMPARTMENTS_PY (
    COMPARTMENT_ID VARCHAR2(100),
    NAME VARCHAR2(100),
    PATH VARCHAR2(300)
);

CREATE TABLE ""USAGE"".""OCI_AVAILABILITY_METRICS_PY"" 
(
    ""RESOURCEDISPLAYNAME"" VARCHAR2(64 BYTE), 
    ""TIMESTAMP"" TIMESTAMP (6), 
    ""NAMESPACE"" VARCHAR2(64 BYTE), 
    ""COMPARTMENT_ID"" VARCHAR2(256 BYTE), 
    ""VALUE"" NUMBER, 
    ""METRIC_NAME"" VARCHAR2(128 BYTE)
);'
);

INSERT INTO AI_PROMPT_COMPONENTS (component_type, content)
VALUES ('TABLE_DESCRIPTIONS', 'Table FOCUS_REPORTS_PY contains OCI billing data, including:
- BILLINGPERIODSTART: First day of the billing month (e.g., 01-APR-2025)
- BILLINGACCOUNTID: OCI billing account ID
- EFFECTIVECOST: the actual cost incurred for each row
- USAGEQUANTITY: the quantity of resource usage for each row
- USAGEUNIT: unit of resource usage (e.g., OCPU, GB)
- SERVICECATEGORY: Broad category (e.g., Compute, Storage, Databases). Always use Camel Case
- SERVICENAME: Specific service name (e.g., BLOCK_STORAGE, COMPUTE, LOGGING, DATABASE). Always use capitals
- RESOURCEID: identifier for the OCI resource
- RESOURCETYPE: type of resource (e.g., instance, bootvolume, vmcluster, vnic, log). Always use lower case
- CHARGEDESCRIPTION: specific description of the charge or usage which also identifies an SKU (e.g., Standard - E5 - Memory, Logging - Storage, Database Exadata Cloud at Customer - Database OCPU - BYOL)
- OCI_COMPARTMENTID: identifier of the compartment

Table OCI_RESOURCES_PY maps RESOURCEID to:
- IDENTIFIER: unique resource identifier
- DISPLAY_NAME: human-readable resource name

Table OCI_COMPARTMENTS_PY maps compartment IDs to:
- COMPARTMENT_ID: identifier of the compartment
- NAME: name of the compartment
- PATH: full hierarchy path of the compartment

Table OCI_AVAILABILITY_METRICS_PY contains availability metrics for various OCI resources:
- RESOURCEDISPLAYNAME: The name of the OCI Resource 
- TIMESTAMP: Timestamp of the reported availability metric
- NAMESPACE: Defines the metric category
- COMPARTMENT_ID: OCI Compartment the metric was reported
- VALUE: Value of the metric
- METRIC_NAME: Specific metric name as a child of namespace');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (1, 'show me how much have we spent for AI last two months', 
'SELECT ROUND(SUM("t"."EFFECTIVECOST"),1) AS "TOTAL_COST" 
FROM "FOCUS_REPORTS_PY" "t"
WHERE UPPER("t"."SERVICENAME") LIKE UPPER(''%AI%'')
AND "t"."BILLINGPERIODSTART" > SYSTIMESTAMP - INTERVAL ''2'' MONTH;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (2, 'how many E5 OCPUs have been consumed in April 2025', 
'SELECT ROUND(SUM("f"."USAGEQUANTITY"), 0)  
FROM "FOCUS_REPORTS_PY" "f"  
WHERE  
  UPPER("f"."SERVICECATEGORY") LIKE UPPER(''Compute'')  
  AND "f"."CHARGEDESCRIPTION" LIKE ''%E5%''  
  AND TO_CHAR("f"."BILLINGPERIODSTART", ''YYYY-MM'') = ''2025-04'';');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (3, 'Which compartments had the highest cost in April 2025?', 
'SELECT "c"."NAME" AS "COMPARTMENT_NAME",
       ROUND(SUM("f"."EFFECTIVECOST"),1) AS "TOTAL_COST"
FROM "FOCUS_REPORTS_PY" "f"
JOIN "OCI_COMPARTMENTS_PY" "c"
  ON "f"."OCI_COMPARTMENTID" = "c"."COMPARTMENT_ID"
WHERE TO_CHAR("f"."BILLINGPERIODSTART", ''YYYY-MM'') = ''2025-04''
GROUP BY "c"."Name"
ORDER BY SUM("f"."EFFECTIVECOST") DESC;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (4, 'top 5 services by cost last month', 
'SELECT 
  f.SERVICENAME,
  ROUND(SUM("f"."EFFECTIVECOST"),1) AS TOTAL_COST
FROM 
  FOCUS_REPORTS_PY f
WHERE 
  f.BILLINGPERIODSTART = TRUNC(ADD_MONTHS(SYSDATE, -1), ''MM'')
GROUP BY 
  f.SERVICENAME
ORDER BY 
  TOTAL_COST DESC
FETCH FIRST 5 ROWS ONLY;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (5, 'What was the total usage in GB for Object Storage in March 2025?', 
'SELECT ROUND(SUM("f"."USAGEQUANTITY"), 0) AS "TOTAL_USAGE"
FROM "FOCUS_REPORTS_PY" "f"
WHERE UPPER("f"."CHARGEDESCRIPTION") LIKE UPPER(''%Object Storage%'')
  AND UPPER("f"."USAGEUNIT") LIKE UPPER(''%GB%'')
  AND TO_CHAR("f"."BILLINGPERIODSTART", ''YYYY-MM'') = ''2025-03'';');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (6, 'Show monthly total cost for the last 3 months', 
'SELECT TO_CHAR("f"."BILLINGPERIODSTART", ''YYYY-MM'') AS "MONTH",
       ROUND(SUM("f"."EFFECTIVECOST"),1) AS "TOTAL_COST"
FROM "FOCUS_REPORTS_PY" "f"
WHERE "f"."BILLINGPERIODSTART" >= TRUNC(ADD_MONTHS(SYSDATE, -3), ''MM'')
GROUP BY TO_CHAR("f"."BILLINGPERIODSTART", ''YYYY-MM'')
ORDER BY "MONTH" DESC;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (7, 'How much did we spend on Block Volume in the last month?', 
'SELECT ROUND(SUM("f"."EFFECTIVECOST"),1) AS "TOTAL_COST"
FROM "FOCUS_REPORTS_PY" "f"
WHERE UPPER("f"."CHARGEDESCRIPTION") LIKE UPPER(''%Block Volume%'')
  AND "f"."BILLINGPERIODSTART" = TRUNC(ADD_MONTHS(SYSDATE, -1), ''MM'');');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (8, 'List the top 5 compartments by compute cost in the last two months', 
'SELECT "c"."NAME" AS "COMPARTMENT_NAME",
       ROUND(SUM("f"."EFFECTIVECOST"),1) AS "TOTAL_COST"
FROM "FOCUS_REPORTS_PY" "f"
JOIN "OCI_COMPARTMENTS_PY" "c"
  ON "f"."OCI_COMPARTMENTID" = "c"."COMPARTMENT_ID"
WHERE UPPER("f"."SERVICECATEGORY") LIKE UPPER(''%COMPUTE%'')
  AND "f"."BILLINGPERIODSTART" > SYSTIMESTAMP - INTERVAL ''2'' MONTH
GROUP BY "c"."NAME"
ORDER BY SUM("f"."EFFECTIVECOST") DESC
FETCH FIRST 5 ROWS ONLY;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (9, 'Show usage by service for February 2025', 
'SELECT "f"."SERVICENAME",
       ROUND(SUM("f"."EFFECTIVECOST"),1) AS "TOTAL_USAGE"
FROM "FOCUS_REPORTS_PY" "f"
WHERE TO_CHAR("f"."BILLINGPERIODSTART", ''YYYY-MM'') = ''2025-02''
GROUP BY "f"."SERVICENAME";');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (10, 'Breakdown of usage units for Object Storage last month', 
'SELECT "f"."USAGEUNIT",
       ROUND(SUM("f"."USAGEQUANTITY"), 0) AS "TOTAL_USAGE"
FROM "FOCUS_REPORTS_PY" "f"
WHERE UPPER("f"."CHARGEDESCRIPTION") LIKE UPPER(''%Object Storage%'')
  AND "f"."BILLINGPERIODSTART" = TRUNC(ADD_MONTHS(SYSDATE, -1), ''MM'')
GROUP BY "f"."USAGEUNIT";');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (11, 'Whats is the monthly cost comparison with Percentage Change?', 
'WITH monthly_costs AS (
  SELECT 
    TRUNC(f.BILLINGPERIODSTART, ''MM'') AS PERIODSTART,
    ROUND(SUM("f"."EFFECTIVECOST"),1) AS TOTAL_COST
  FROM 
    FOCUS_REPORTS_PY f
  WHERE 
    f.BILLINGPERIODSTART >= TRUNC(ADD_MONTHS(SYSDATE, -6), ''MM'')
    AND f.BILLINGPERIODSTART < TRUNC(SYSDATE, ''MM'')
  GROUP BY 
    TRUNC(f.BILLINGPERIODSTART, ''MM'')
),
cost_with_change AS (
  SELECT 
    PERIODSTART,
    TOTAL_COST,
    LAG(TOTAL_COST) OVER (ORDER BY PERIODSTART) AS PREV_MONTH_COST
  FROM 
    monthly_costs
)
SELECT 
  TO_CHAR(PERIODSTART, ''YYYY-MM'') AS MONTH,
  TOTAL_COST,
  PREV_MONTH_COST,
  ROUND(
    ((TOTAL_COST - PREV_MONTH_COST) / PREV_MONTH_COST) * 100, 2
  ) AS PERCENT_CHANGE
FROM 
  cost_with_change
WHERE 
  PREV_MONTH_COST IS NOT NULL
ORDER BY 
  PERIODSTART DESC;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (12, 'Show me database availability', 
'SELECT
  ROUND(SUM(VALUE) * 100.0 / COUNT(*), 6) AS PERCENTAGE, ''Up'' AS STATUS_LABEL
FROM OCI_AVAILABILITY_METRICS_PY
WHERE NAMESPACE = ''oci_database_cluster''
UNION ALL
SELECT
  100-ROUND(SUM(VALUE) * 100.0 / COUNT(*), 6) AS PERCENTAGE, ''Down'' AS STATUS_LABEL
FROM OCI_AVAILABILITY_METRICS_PY
WHERE NAMESPACE = ''oci_database_cluster'';');