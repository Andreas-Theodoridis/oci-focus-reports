--------------------------------------------------------
--  File created - Monday-June-23-2025   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table AI_CHAT_LOG
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."AI_CHAT_LOG" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CHAT_ID" NUMBER, 
	"APP_USER" VARCHAR2(255) COLLATE "USING_NLS_COMP", 
	"SESSION_ID" VARCHAR2(255) COLLATE "USING_NLS_COMP", 
	"USER_MESSAGE" CLOB COLLATE "USING_NLS_COMP", 
	"GENERATED_SQL" CLOB COLLATE "USING_NLS_COMP", 
	"EXECUTION_DATA" CLOB COLLATE "USING_NLS_COMP", 
	"RAW_RESPONSE" CLOB COLLATE "USING_NLS_COMP", 
	"SUMMARY_TEXT" CLOB COLLATE "USING_NLS_COMP", 
	"REASONED_MESSAGE" CLOB COLLATE "USING_NLS_COMP", 
	"CREATED_AT" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
  ALTER TABLE "OCI_FOCUS_REPORTS"."AI_CHAT_LOG" ADD PRIMARY KEY ("ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  DDL for Table AI_CHAT_LOG_REASONING
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."AI_CHAT_LOG_REASONING" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CHAT_ID" NUMBER, 
	"LOG_ID" NUMBER, 
	"INPUT_MESSAGE" CLOB COLLATE "USING_NLS_COMP", 
	"REPHRASED_OUTPUT" CLOB COLLATE "USING_NLS_COMP", 
	"ATTEMPT_NUMBER" NUMBER, 
	"APP_USER" VARCHAR2(255) COLLATE "USING_NLS_COMP", 
	"CREATED_AT" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
  ALTER TABLE "OCI_FOCUS_REPORTS"."AI_CHAT_LOG_REASONING" ADD PRIMARY KEY ("ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  DDL for Table COST_USAGE_TIMESERIES
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."COST_USAGE_TIMESERIES" 
   (	"DATE_BUCKET" DATE, 
	"GRANULARITY" VARCHAR2(10) COLLATE "USING_NLS_COMP", 
	"BILLINGACCOUNTID" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"SUBACCOUNTNAME" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"INVOICEISSUER" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"REGION" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"BILLINGCURRENCY" VARCHAR2(20) COLLATE "USING_NLS_COMP", 
	"SERVICECATEGORY" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"SERVICENAME" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"CHARGEDESCRIPTION" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"RESOURCETYPE" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"RESOURCEID" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"SKUID" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"PRICINGUNIT" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"OCI_COMPARTMENTID" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"OCI_COMPARTMENTNAME" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"USAGEUNIT" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"COST" NUMBER(20,6), 
	"USAGE" NUMBER(20,6), 
	"LAST_REFRESH" DATE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table CREDIT_USAGE_AGG
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."CREDIT_USAGE_AGG" 
   (	"BILLINGACCOUNTID" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"CHARGEPERIODEND" DATE, 
	"BILLEDCOST" NUMBER, 
	"HOURLY_COST" NUMBER, 
	"INSERTED_AT" DATE DEFAULT SYSDATE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table FOCUS_REPORTS_PY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."FOCUS_REPORTS_PY" 
   (	"AVAILABILITYZONE" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"BILLEDCOST" NUMBER, 
	"BILLINGACCOUNTID" NUMBER, 
	"BILLINGACCOUNTNAME" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"BILLINGCURRENCY" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"BILLINGPERIODEND" TIMESTAMP (6), 
	"BILLINGPERIODSTART" TIMESTAMP (6), 
	"CHARGECATEGORY" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"CHARGEDESCRIPTION" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"CHARGEFREQUENCY" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"CHARGEPERIODEND" TIMESTAMP (6), 
	"CHARGEPERIODSTART" TIMESTAMP (6), 
	"CHARGESUBCATEGORY" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"COMMITMENTDISCOUNTCATEGORY" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"COMMITMENTDISCOUNTID" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"COMMITMENTDISCOUNTNAME" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"COMMITMENTDISCOUNTTYPE" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"EFFECTIVECOST" NUMBER, 
	"INVOICEISSUER" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"LISTCOST" NUMBER, 
	"LISTUNITPRICE" NUMBER, 
	"PRICINGCATEGORY" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"PRICINGQUANTITY" NUMBER, 
	"PRICINGUNIT" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"PROVIDER" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"PUBLISHER" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"REGION" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"RESOURCEID" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"RESOURCENAME" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"RESOURCETYPE" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"SERVICECATEGORY" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"SERVICENAME" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"SKUID" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"SKUPRICEID" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"SUBACCOUNTID" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"SUBACCOUNTNAME" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"TAGS" CLOB COLLATE "USING_NLS_COMP", 
	"USAGEQUANTITY" NUMBER, 
	"USAGEUNIT" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"OCI_REFERENCENUMBER" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"OCI_COMPARTMENTID" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"OCI_COMPARTMENTNAME" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"OCI_OVERAGEFLAG" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"OCI_UNITPRICEOVERAGE" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"OCI_BILLEDQUANTITYOVERAGE" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"OCI_COSTOVERAGE" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"OCI_ATTRIBUTEDUSAGE" NUMBER, 
	"OCI_ATTRIBUTEDCOST" NUMBER, 
	"OCI_BACKREFERENCENUMBER" VARCHAR2(4000) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" 
  PARTITION BY RANGE ("CHARGEPERIODSTART") INTERVAL (NUMTOYMINTERVAL(1, 'MONTH')) 
 (PARTITION "P_BEFORE_2024"  VALUES LESS THAN (TIMESTAMP' 2024-01-01 00:00:00') ) ;
 CREATE INDEX "OCI_FOCUS_REPORTS"."IDX_CREDIT_AGG_BILLING" ON "OCI_FOCUS_REPORT
S"."CREDIT_USAGE_AGG" ("BILLINGACCOUNTID", "CHARGEPERIODEND") 
  ;

  CREATE INDEX "OCI_FOCUS_REPORTS"."IDX_FOCUS_REPORTS_OCI_REF" ON "OCI_FOCUS_REP
ORTS"."FOCUS_REPORTS_PY" ("OCI_REFERENCENUMBER") 
  ;

  CREATE INDEX "OCI_FOCUS_REPORTS"."IDX_FRP_CPE" ON "OCI_FOCUS_REPORTS"."FOCUS_R
EPORTS_PY" ("CHARGEPERIODEND") 
  ;

  CREATE INDEX "OCI_FOCUS_REPORTS"."IDX_FRP_BAID_CPE" ON "OCI_FOCUS_REPORTS"."FO
CUS_REPORTS_PY" ("BILLINGACCOUNTID", "CHARGEPERIODEND") 
  ;
--------------------------------------------------------
--  DDL for Table OCI_AVAILABILITY_METRICS_PY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_AVAILABILITY_METRICS_PY" 
   (	"RESOURCEDISPLAYNAME" VARCHAR2(64) COLLATE "USING_NLS_COMP", 
	"TIMESTAMP" TIMESTAMP (6), 
	"NAMESPACE" VARCHAR2(64) COLLATE "USING_NLS_COMP", 
	"COMPARTMENT_ID" VARCHAR2(256) COLLATE "USING_NLS_COMP", 
	"VALUE" NUMBER, 
	"METRIC_NAME" VARCHAR2(128) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" 
  PARTITION BY RANGE ("TIMESTAMP") INTERVAL (NUMTOYMINTERVAL(1, 'MONTH')) 
 (PARTITION "OCI_AVAILABILITY_METRICS_PY_BEFORE_2022"  VALUES LESS THAN (TIMESTAMP' 2022-01-01 00:00:00') ) ;
--------------------------------------------------------
--  DDL for Table OCI_COMPARTMENTS_PY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_COMPARTMENTS_PY" 
   (	"COMPARTMENT_ID" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"NAME" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"DESCRIPTION" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"LIFECYCLE_STATE" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"TIME_CREATED" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"PARENT_ID" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"PARENT" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"PATH" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"TENANCY_ID" VARCHAR2(2000) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table OCI_EXA_MAINTENANCE_PY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_EXA_MAINTENANCE_PY" 
   (	"ID" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"COMPARTMENT_ID" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"CURRENT_CUSTOM_ACTION_TIMEOUT_IN_MINS" NUMBER, 
	"CURRENT_PATCHING_COMPONENT" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"CUSTOM_ACTION_TIMEOUT_IN_MINS" NUMBER, 
	"DATABASE_SOFTWARE_IMAGE_ID" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"DESCRIPTION" VARCHAR2(10000) COLLATE "USING_NLS_COMP", 
	"DISPLAY_NAME" VARCHAR2(500) COLLATE "USING_NLS_COMP", 
	"ESTIMATED_DB_SERVER_PATCHING_TIME" NUMBER, 
	"ESTIMATED_NETWORK_SWITCHES_PATCHING_TIME" NUMBER, 
	"ESTIMATED_STORAGE_SERVER_PATCHING_TIME" NUMBER, 
	"TOTAL_ESTIMATED_PATCHING_TIME" NUMBER, 
	"IS_CUSTOM_ACTION_TIMEOUT_ENABLED" VARCHAR2(10) COLLATE "USING_NLS_COMP", 
	"IS_DST_FILE_UPDATE_ENABLED" VARCHAR2(10) COLLATE "USING_NLS_COMP", 
	"IS_MAINTENANCE_RUN_GRANULAR" VARCHAR2(10) COLLATE "USING_NLS_COMP", 
	"LIFECYCLE_DETAILS" VARCHAR2(10000) COLLATE "USING_NLS_COMP", 
	"LIFECYCLE_STATE" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"MAINTENANCE_SUBTYPE" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"MAINTENANCE_TYPE" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"PATCH_FAILURE_COUNT" NUMBER, 
	"PATCH_ID" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"PATCHING_END_TIME" TIMESTAMP (6), 
	"PATCHING_MODE" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"PATCHING_START_TIME" TIMESTAMP (6), 
	"PATCHING_STATUS" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"PEER_MAINTENANCE_RUN_ID" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"PEER_MAINTENANCE_RUN_IDS" CLOB COLLATE "USING_NLS_COMP", 
	"TARGET_DB_SERVER_VERSION" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"TARGET_RESOURCE_ID" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"TARGET_RESOURCE_TYPE" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"TARGET_STORAGE_SERVER_VERSION" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"TIME_ENDED" TIMESTAMP (6), 
	"TIME_SCHEDULED" TIMESTAMP (6), 
	"TIME_STARTED" TIMESTAMP (6), 
	"TOTAL_TIME_TAKEN_IN_MINS" NUMBER
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table OCI_RESOURCES_PY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_RESOURCES_PY" 
   (	"DISPLAY_NAME" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"IDENTIFIER" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"REGION" VARCHAR2(60) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table OCI_SUBSCRIPTIONS_PY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_SUBSCRIPTIONS_PY" 
   (	"SUBSCRIPTION_ID" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"ISO_CODE" VARCHAR2(10) COLLATE "USING_NLS_COMP", 
	"NAME" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"STD_PRECISION" NUMBER, 
	"SERVICE_NAME" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"STATUS" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"AVAILABLE_AMOUNT" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"BOOKING_OPTY_NUMBER" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"COMMITMENT_SERVICES" CLOB COLLATE "USING_NLS_COMP", 
	"CSI" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"DATA_CENTER_REGION" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"FUNDED_ALLOCATION_VALUE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"ID" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"IS_INTENT_TO_PAY" VARCHAR2(10) COLLATE "USING_NLS_COMP", 
	"NET_UNIT_PRICE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"OPERATION_TYPE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"ORDER_NUMBER" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"ORIGINAL_PROMO_AMOUNT" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PARTNER_TRANSACTION_TYPE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PRICING_MODEL" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PRODUCT_NAME" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"PRODUCT_PART_NUMBER" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PRODUCT_PROVISIONING_GROUP" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PRODUCT_UNIT_OF_MEASURE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PROGRAM_TYPE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PROMO_TYPE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"QUANTITY" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"SUBSTATUS" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"TIME_END" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"TIME_START" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"TOTAL_VALUE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"USED_AMOUNT" VARCHAR2(100) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table OCI_SUBSCRIPTION_DETAILS
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_SUBSCRIPTION_DETAILS" 
   (	"SUBSCRIPTION_ID" NUMBER, 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"COMMITED_CREDITS" NUMBER, 
	"CREDITS_CONSUMED" VARCHAR2(20) COLLATE "USING_NLS_COMP", 
	"CREDITS_CONSUMED_DATE" DATE, 
	"ORDER_NAME" VARCHAR2(128) COLLATE "USING_NLS_COMP", 
	"CURRENCY" VARCHAR2(20) COLLATE "USING_NLS_COMP", 
	"ORDER_ID" NUMBER
   )  DEFAULT COLLATION "USING_NLS_COMP" ;

  CREATE BITMAP INDEX "OCI_FOCUS_REPORTS"."IDX_OCI_CC" ON "OCI_FOCUS_REPORTS"."OCI_SUBSCRIPTION_DETAILS" ("CREDITS_CONSUMED");
  CREATE BITMAP INDEX "OCI_FOCUS_REPORTS"."IDX_OCI_CURRENCY" ON "OCI_FOCUS_REPORTS"."OCI_SUBSCRIPT;
--------------------------------------------------------
--  DDL for Table OCI_WORKLOADS
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_WORKLOADS" 
   (	"WORKLOAD_NAME" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"VALUE" CLOB COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
  ALTER TABLE "OCI_FOCUS_REPORTS"."OCI_WORKLOADS" ADD CONSTRAINT "OCI_WORKLOADS_PK" PRIMARY KEY ("WORKLOAD_NAME")
  USING INDEX  ENABLE;
  CREATE UNIQUE INDEX "OCI_FOCUS_REPORTS"."OCI_WORKLOADS_PK" ON "OCI_FOCUS_REPORTS"."OCI_WORKLOADS" ("WORKLOAD_NAME") 
  ;
--------------------------------------------------------
--  DDL for Table PAGE1_CONS_WRKLD_MONTH_CHART_DATA
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."PAGE1_CONS_WRKLD_MONTH_CHART_DATA" 
   (	"WORKLOAD_NAME" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"MONTH" DATE, 
	"COST" NUMBER, 
	"LAST_REFRESH" DATE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
  ALTER TABLE "OCI_FOCUS_REPORTS"."PAGE1_CONS_WRKLD_MONTH_CHART_DATA" ADD PRIMARY KEY ("WORKLOAD_NAME", "MONTH")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  DDL for Table PAGE1_CONS_WRKLD_WEEK_CHART_DATA
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."PAGE1_CONS_WRKLD_WEEK_CHART_DATA" 
   (	"WORKLOAD_NAME" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"WEEK_START" DATE, 
	"COST" NUMBER, 
	"LAST_REFRESH" DATE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
  ALTER TABLE "OCI_FOCUS_REPORTS"."PAGE1_CONS_WRKLD_WEEK_CHART_DATA" ADD PRIMARY KEY ("WORKLOAD_NAME", "WEEK_START")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  DDL for Materialized View FILTER_VALUES_MV
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OCI_FOCUS_REPORTS"."FILTER_VALUES_MV" ("SUBACCOUNTNAME", "BILLINGACCOUNTID", "REGION", "OCI_COMPARTMENTID", "SERVICECATEGORY", "SERVICENAME", "CHARGEDESCRIPTION", "RESOURCETYPE", "RESOURCEID", "RESOURCENAME")
  DEFAULT COLLATION "USING_NLS_COMP"  SEGMENT CREATION IMMEDIATE
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE ON QUERY COMPUTATION DISABLE QUERY REWRITE DISABLE CONCURRENT REFRESH
  AS SELECT DISTINCT
  fr.SUBACCOUNTNAME,
  fr.BILLINGACCOUNTID,
  fr.REGION,
  fr.OCI_COMPARTMENTID,
  fr.SERVICECATEGORY,
  fr.SERVICENAME,
  fr.CHARGEDESCRIPTION,
  fr.RESOURCETYPE,
  fr.RESOURCEID,
  r.DISPLAY_NAME AS RESOURCENAME
FROM FOCUS_REPORTS_PY fr
LEFT JOIN OCI_RESOURCES_PY r
  ON r.IDENTIFIER = fr.RESOURCEID
  WHERE fr.REGION != 'Commitment Expiration';

   COMMENT ON MATERIALIZED VIEW "OCI_FOCUS_REPORTS"."FILTER_VALUES_MV"  IS 'snapshot table for snapshot OCI_FOCUS_REPORTS.FILTER_VALUES_MV';
--------------------------------------------------------
--  DDL for Materialized View RATECARD_MV
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OCI_FOCUS_REPORTS"."RATECARD_MV" ("CHARGEDESCRIPTION", "PRICINGUNIT", "SKUID", "ACTUALUNITPRICE", "LISTUNITPRICE")
  DEFAULT COLLATION "USING_NLS_COMP"  SEGMENT CREATION IMMEDIATE
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH COMPLETE ON DEMAND START WITH sysdate+0 NEXT TO_DATE(SYSDATE + 1)
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE ON QUERY COMPUTATION DISABLE QUERY REWRITE DISABLE CONCURRENT REFRESH
  AS SELECT 
    CHARGEDESCRIPTION, 
    PRICINGUNIT,
    MIN(SKUID) AS SKUID, 
    AVG(ROUND(EFFECTIVECOST/PRICINGQUANTITY, 4)) AS ACTUALUNITPRICE, 
    MAX(LISTUNITPRICE) AS LISTUNITPRICE
FROM 
    FOCUS_REPORTS_PY
WHERE 
    PRICINGQUANTITY > 0
AND CHARGEDESCRIPTION NOT LIKE UPPER('%FREE%')
AND BILLINGACCOUNTID='9379274'
AND CHARGECATEGORY='Usage'
GROUP BY 
    BILLINGACCOUNTID, 
    CHARGEDESCRIPTION, 
    PRICINGUNIT;

   COMMENT ON MATERIALIZED VIEW "OCI_FOCUS_REPORTS"."RATECARD_MV"  IS 'snapshot table for snapshot USAGE.RATECARD_MV';
--------------------------------------------------------
--  DDL for Procedure OV_AI_AGENT_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "OCI_FOCUS_REPORTS"."OV_AI_AGENT_PROC" (
    p_user_message     IN VARCHAR2,
    p_sql_agent_id     IN VARCHAR2,
    p_chat_id          IN NUMBER,
    p_app_user         IN VARCHAR2,
    p_app_session      IN VARCHAR2,
    p_region           IN VARCHAR2,
    p_compartment_id   IN VARCHAR2,
    p_row_id           OUT ai_chat_log.id%TYPE,
    p_final_sql        OUT CLOB,
    p_final_response   OUT CLOB,
    p_final_aimessage  OUT CLOB
) AS
    -- Variables reused across attempts
    v_attempt              NUMBER := 0;
    v_max_attempts         CONSTANT NUMBER := 5;
    v_last_failed          VARCHAR2(1) := 'Y';
    v_reasoned_message     CLOB;
    v_reasoning_row_id     NUMBER;

    -- AI agent vars
    v_response_sql         CLOB;
    v_response             CLOB;
    v_aimessage            CLOB;
    v_log_row_id           ai_chat_log.id%TYPE;

    -- Reasoning vars
    l_input_text           VARCHAR2(4000);
    l_prompt               VARCHAR2(4000);
    l_payload              CLOB;
    l_reasoning_response   CLOB;
    l_response_struct      DBMS_CLOUD_TYPES.resp;
    l_resp_obj             JSON_OBJECT_T;
    l_result_text          VARCHAR2(4000);

    -- Summary vars
    v_summary_text         CLOB;
    v_summary_prompt       VARCHAR2(4000);

    -- JSON and execution vars
    l_json_payload         JSON_OBJECT_T;
    l_outer_obj            JSON_OBJECT_T;
    l_inner_obj            JSON_OBJECT_T;
    l_content_obj          JSON_OBJECT_T;
    l_inner_text           VARCHAR2(32767);
    l_exec_result          JSON_ARRAY_T;
    l_sql_body             VARCHAR2(32767);
    l_sql                  VARCHAR2(32767);
    l_cursor               INTEGER;
    l_desc_tab             DBMS_SQL.DESC_TAB;
    l_col_count            INTEGER;
    l_value                VARCHAR2(4000);
    l_has_data             BOOLEAN := FALSE;
    l_status               INTEGER;

    -- Endpoint URLs
    l_sql_endpoint         VARCHAR2(1000);
    l_reasoning_endpoint   VARCHAR2(1000);
BEGIN
    apex_debug.message('🔁 Starting ov_ai_agent_proc');

    l_sql_endpoint := 'https://agent-runtime.generativeai.' || LOWER(p_region) ||
                      '.oci.oraclecloud.com/20240531/agentEndpoints/' || p_sql_agent_id || '/actions/chat';
    l_reasoning_endpoint := 'https://inference.generativeai.' || LOWER(p_region) ||
                            '.oci.oraclecloud.com/20231130/actions/chat';

    apex_debug.message('🔗 Endpoints built. SQL: %s, Reasoning: %s', l_sql_endpoint, l_reasoning_endpoint);

    LOOP
        v_attempt := v_attempt + 1;
        apex_debug.message('🔄 Attempt #%s', v_attempt);

        DECLARE
            l_input VARCHAR2(32767) := CASE WHEN v_attempt = 1 OR v_reasoned_message IS NULL THEN p_user_message ELSE v_reasoned_message END;
        BEGIN
            apex_debug.message('🧠 Input message: %s', l_input);

            -- Prepare SQL agent request
            l_json_payload := JSON_OBJECT_T.parse('{}');
            l_json_payload.put('userMessage', l_input);
            l_json_payload.put('context', JSON_OBJECT_T.parse('{}'));
            l_json_payload.put('isStream', FALSE);
            l_payload := l_json_payload.to_clob;

            apex_debug.message('📤 Sending SQL Agent pa');

            l_response_struct := DBMS_CLOUD.SEND_REQUEST(
                credential_name => 'OCI$RESOURCE_PRINCIPAL',
                uri             => l_sql_endpoint,
                method          => 'POST',
                headers         => JSON_OBJECT('Content-Type' VALUE 'application/json'),
                body            => UTL_RAW.CAST_TO_RAW(l_payload)
            );

            v_response := DBMS_CLOUD.GET_RESPONSE_TEXT(l_response_struct);
            apex_debug.message('📥 SQL Agent raw response: %s', SUBSTR(v_response, 1, 4000));

            IF v_response IS NULL THEN
                apex_debug.message('❌ SQL Agent returned NULL response.');
                v_last_failed := 'Y';
                CONTINUE;
            END IF;

            l_outer_obj := JSON_OBJECT_T.parse(v_response);
            IF NOT l_outer_obj.has('message') THEN
                apex_debug.message('❌ SQL Agent response missing "message"');
                v_last_failed := 'Y';
                CONTINUE;
            END IF;

            l_content_obj := l_outer_obj.get_Object('message').get_Object('content');
            IF l_content_obj IS NULL OR NOT l_content_obj.has('text') THEN
                apex_debug.message('❌ SQL Agent response missing "content.text"');
                v_last_failed := 'Y';
                CONTINUE;
            END IF;

            l_inner_text := l_content_obj.get_String('text');
            apex_debug.message('📦 SQL Agent inner text: %s', SUBSTR(l_inner_text, 1, 1000));

            l_inner_obj := JSON_OBJECT_T.parse(l_inner_text);
            IF NOT l_inner_obj.has('generatedQuery') THEN
                apex_debug.message('❌ Missing "generatedQuery" in agent response');
                v_last_failed := 'Y';
                CONTINUE;
            END IF;

            v_response_sql := l_inner_obj.get_String('generatedQuery');
            v_aimessage := CASE 
                             WHEN l_inner_obj.has('executionResult') THEN l_inner_obj.get_Array('executionResult').to_string 
                             ELSE '[]' 
                           END;

            apex_debug.message('✅ SQL received: %s', SUBSTR(v_response_sql, 1, 1000));

            -- Validate SQL
            l_sql_body := RTRIM(v_response_sql, ';');
            l_sql := 'SELECT * FROM (' || l_sql_body || ') WHERE ROWNUM = 1';

            apex_debug.message('🔍 Validating SQL: %s', l_sql);

            l_cursor := DBMS_SQL.OPEN_CURSOR;
            DBMS_SQL.PARSE(l_cursor, l_sql, DBMS_SQL.NATIVE);
            DBMS_SQL.DESCRIBE_COLUMNS(l_cursor, l_col_count, l_desc_tab);

            FOR i IN 1 .. l_col_count LOOP
                DBMS_SQL.DEFINE_COLUMN(l_cursor, i, l_value, 4000);
            END LOOP;

            l_status := DBMS_SQL.EXECUTE(l_cursor);

            IF DBMS_SQL.FETCH_ROWS(l_cursor) > 0 THEN
                FOR i IN 1 .. l_col_count LOOP
                    DBMS_SQL.COLUMN_VALUE(l_cursor, i, l_value);
                    IF l_value IS NOT NULL THEN
                        l_has_data := TRUE;
                        EXIT;
                    END IF;
                END LOOP;
            END IF;

            DBMS_SQL.CLOSE_CURSOR(l_cursor);

            IF l_has_data THEN
                apex_debug.message('✅ SQL validation successful, logging...');

                v_last_failed := 'N';

                INSERT INTO ai_chat_log (
                    chat_id, app_user, session_id,
                    user_message, generated_sql, execution_data, raw_response
                ) VALUES (
                    p_chat_id, p_app_user, p_app_session,
                    l_input, v_response_sql, v_aimessage, v_response
                ) RETURNING id INTO v_log_row_id;

                UPDATE ai_chat_log_reasoning
                   SET log_id = v_log_row_id
                 WHERE chat_id = p_chat_id
                   AND log_id IS NULL;

                p_row_id := v_log_row_id;
                p_final_sql := v_response_sql;
             p_final_response := v_response;
                p_final_aimessage := v_aimessage;
                -- Generate Summary via GenAI using final AI message
                BEGIN
                    apex_debug.message('📝 Generating summary using DBMS_CLOUD and GenAI');

                    v_summary_prompt := 'You are a helpful financial data analyst. Format summaries clearly using these sections:' || CHR(10) ||
                                        '- Overview' || CHR(10) ||
                                        '- Details' || CHR(10) ||
                                        '- Totals' || CHR(10) ||
                                        '- Observations' || CHR(10) ||
                                        'Use plain text, line breaks, and bullet points.' || CHR(10) ||
                                        'Here is the data to analyze:';

                    l_input_text := v_summary_prompt || CHR(10) || CHR(10) || v_aimessage;

                    apex_debug.message('📤 Summary Input Text: %s', SUBSTR(l_input_text, 1, 4000));

                    l_payload := '{
                      "compartmentId": "' || p_compartment_id || '",
                      "servingMode": {
                        "modelId": "cohere.command-a-03-2025",
                        "servingType": "ON_DEMAND"
                      },
                      "chatRequest": {
                        "message": "' || REPLACE(REPLACE(l_input_text, '"', '\"'), CHR(10), '\n') || '",
                        "apiFormat": "COHERE",
                        "maxTokens": 2048
                      }
                    }';

                    apex_debug.message('📤 Summary Payload: %s', SUBSTR(l_payload, 1, 4000));

                    l_response_struct := DBMS_CLOUD.SEND_REQUEST(
                        credential_name => 'OCI$RESOURCE_PRINCIPAL',
                        uri             => l_reasoning_endpoint,
                        method          => 'POST',
                        headers         => JSON_OBJECT('Content-Type' VALUE 'application/json'),
                        body            => UTL_RAW.CAST_TO_RAW(l_payload)
                    );

                    l_reasoning_response := DBMS_CLOUD.GET_RESPONSE_TEXT(l_response_struct);
                    apex_debug.message('📥 Raw Summary Response: %s', SUBSTR(l_reasoning_response, 1, 4000));

                    l_resp_obj := JSON_OBJECT_T.parse(l_reasoning_response);

                    IF l_resp_obj.has('chatResponse') THEN
                        v_summary_text := l_resp_obj.get_Object('chatResponse').get_String('text');

                        apex_debug.message('✅ Parsed Summary: %s', SUBSTR(v_summary_text, 1, 4000));

                        UPDATE ai_chat_log
                          SET summary_text = v_summary_text,
                              reasoned_message = v_reasoned_message
                        WHERE id = v_log_row_id;

                        apex_debug.message('🧾 Summary stored in ai_chat_log');
                    ELSE
                        apex_debug.message('⚠️ chatResponse not found in response');
                    END IF;

                EXCEPTION
                    WHEN OTHERS THEN
                        apex_debug.message('❌ Summary generation failed: %s', SQLERRM);
                END;
                EXIT;
            ELSE
                apex_debug.message('⚠️ SQL produced no results.');
                v_last_failed := 'Y';
            END IF;

        EXCEPTION
            WHEN OTHERS THEN
                apex_debug.message('❌ Exception in SQL step: %s', SQLERRM);
                IF DBMS_SQL.IS_OPEN(l_cursor) THEN
                    DBMS_SQL.CLOSE_CURSOR(l_cursor);
                END IF;
                v_last_failed := 'Y';
        END;

        -- Step 2: Run Reasoning
        IF v_last_failed = 'Y' AND v_attempt < v_max_attempts THEN
            apex_debug.message('🧠 Triggering reasoning agent');

            l_input_text := NVL(v_reasoned_message, p_user_message);

            l_prompt := 'Rephrase the following business question by replacing informal IT terms (e.g., "RAM") with their corresponding enterprise equivalents (e.g., "memory") that arey used in the database. Preserve the original structure, intent, and meaning of the question. Only substitute terms where necessary and ensure the rephrased question remains as close as possible to the original. Respond only with the rephrased question. No explanation.';

            -- Combine prompt + user input in the message
            l_input_text := l_prompt || CHR(10) || CHR(10) || l_input_text;

            l_payload := '{
            "compartmentId": "' || p_compartment_id || '",
            "servingMode": {
                "modelId": "cohere.command-a-03-2025",
                "servingType": "ON_DEMAND"
            },
            "chatRequest": {
                "message": "' || REPLACE(REPLACE(l_input_text, '"', '\"'), CHR(10), '\n') || '",
                "apiFormat": "COHERE",
                "maxTokens": 2048
            }
            }';

            apex_debug.message('📤 Sending reasoning request');

            l_response_struct := DBMS_CLOUD.SEND_REQUEST(
                credential_name => 'OCI$RESOURCE_PRINCIPAL',
                uri             => l_reasoning_endpoint,
                method          => 'POST',
                headers         => JSON_OBJECT('Content-Type' VALUE 'application/json'),
                body            => UTL_RAW.CAST_TO_RAW(l_payload)
            );

            l_reasoning_response := DBMS_CLOUD.GET_RESPONSE_TEXT(l_response_struct);
            apex_debug.message('📥 Reasoning raw response: %s', SUBSTR(l_reasoning_response, 1, 4000));

            l_resp_obj := JSON_OBJECT_T.parse(l_reasoning_response);

            IF l_resp_obj.has('chatResponse') THEN
                l_result_text := l_resp_obj.get_Object('chatResponse').get_String('text');
                v_reasoned_message := l_result_text;

                apex_debug.message('✅ Reasoned message: %s', l_result_text);

                INSERT INTO ai_chat_log_reasoning (
                    chat_id, log_id, input_message, rephrased_output,
                    attempt_number, app_user, created_at
                ) VALUES (
                    p_chat_id, NULL, l_input_text, l_result_text,
                    v_attempt, p_app_user, SYSTIMESTAMP
                ) RETURNING id INTO v_reasoning_row_id;
            ELSE
                apex_debug.message('❌ Reasoning "chatResponse" not found in response');
                v_last_failed := 'Y';
            END IF;
        ELSE
            EXIT WHEN v_attempt >= v_max_attempts;
        END IF;

    END LOOP;

    IF v_last_failed = 'Y' THEN
        apex_debug.message('❌ Final failure after %s attempts', v_attempt);
        RAISE_APPLICATION_ERROR(-20010, '❌ All AI attempts failed to generate a working SQL query.');
    END IF;

    apex_debug.message('🎉 Procedure completed successfully');
END;

/
--------------------------------------------------------
--  DDL for Procedure PAGE1_CONS_WRKLD_MONTH_CHART_DATA_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "OCI_FOCUS_REPORTS"."PAGE1_CONS_WRKLD_MONTH_CHART_DATA_PROC" AS
  l_title   VARCHAR2(400);
  l_value   CLOB;
BEGIN
  -- Truncate the table once before processing
  EXECUTE IMMEDIATE 'TRUNCATE TABLE PAGE1_CONS_WRKLD_MONTH_CHART_DATA';

  -- Loop through top N rows by row_number
  FOR rec IN (
    SELECT DBMS_LOB.SUBSTR(WORKLOAD_NAME, 4000) AS WORKLOAD_NAME,
           DBMS_LOB.SUBSTR(VALUE, 4000) AS COMPARTMENTS,
           ROW_NUMBER() OVER (ORDER BY WORKLOAD_NAME) AS rn
    FROM OCI_WORKLOADS
    WHERE VALUE IS NOT NULL
  ) LOOP
    -- Skip empty compartment lists
    IF rec.COMPARTMENTS IS NOT NULL THEN
      -- Insert aggregated data
      INSERT INTO PAGE1_CONS_WRKLD_MONTH_CHART_DATA (
        WORKLOAD_NAME,
        MONTH,
        COST,
        LAST_REFRESH
      )
      SELECT
        rec.WORKLOAD_NAME,
        TRUNC(CHARGEPERIODEND, 'MM') AS MONTH,
        SUM(BILLEDCOST) AS COST,
        SYSDATE
      FROM FOCUS_REPORTS_PY
      WHERE CHARGEPERIODEND >= ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -12)
        AND OCI_COMPARTMENTID IN (
          SELECT TRIM(column_value)
          FROM TABLE(APEX_STRING.SPLIT(rec.COMPARTMENTS, ','))
        )
      GROUP BY TRUNC(CHARGEPERIODEND, 'MM');
    END IF;
  END LOOP;
  -- Ensure all changes are committed
  COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure PAGE1_CONS_WRKLD_WEEK_CHART_DATA_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "OCI_FOCUS_REPORTS"."PAGE1_CONS_WRKLD_WEEK_CHART_DATA_PROC" AS
  l_title   VARCHAR2(400);
  l_value   CLOB;
BEGIN
  -- Truncate the entire table before inserting fresh data
  EXECUTE IMMEDIATE 'TRUNCATE TABLE PAGE1_CONS_WRKLD_WEEK_CHART_DATA';

  -- Loop through top N rows by row_number
  FOR rec IN (
    SELECT DBMS_LOB.SUBSTR(WORKLOAD_NAME, 4000) AS WORKLOAD_NAME,
           DBMS_LOB.SUBSTR(VALUE, 4000) AS COMPARTMENTS,
           ROW_NUMBER() OVER (ORDER BY WORKLOAD_NAME) AS rn
    FROM OCI_WORKLOADS
    WHERE VALUE IS NOT NULL
  ) LOOP
    -- Skip if compartment list is empty
    IF rec.COMPARTMENTS IS NOT NULL THEN
      -- Insert new aggregated data
      INSERT INTO PAGE1_CONS_WRKLD_WEEK_CHART_DATA (
        WORKLOAD_NAME,
        WEEK_START,
        COST,
        LAST_REFRESH
      )
      SELECT
        rec.WORKLOAD_NAME,
        TRUNC(CHARGEPERIODEND, 'IW') AS WEEK_START,
        SUM(BILLEDCOST) AS COST,
        SYSDATE
      FROM FOCUS_REPORTS_PY
      WHERE CHARGEPERIODEND >= TRUNC(SYSDATE, 'IW') - INTERVAL '56' DAY
        AND CHARGEPERIODEND < TRUNC(SYSDATE, 'IW') -- Exclude current week
        AND OCI_COMPARTMENTID IN (
          SELECT TRIM(column_value)
          FROM TABLE(APEX_STRING.SPLIT(rec.COMPARTMENTS, ','))
        )
      GROUP BY TRUNC(CHARGEPERIODEND, 'IW');
    END IF;
  END LOOP;
  -- Ensure all changes are committed
  COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure REFRESH_COST_USAGE_TS_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "OCI_FOCUS_REPORTS"."REFRESH_COST_USAGE_TS_PROC" AS
BEGIN
  EXECUTE IMMEDIATE 'TRUNCATE TABLE COST_USAGE_TIMESERIES';

  FOR granularity IN (
    SELECT 'DAY' AS g FROM DUAL UNION ALL
    SELECT 'WEEK' FROM DUAL UNION ALL
    SELECT 'MONTH' FROM DUAL
  ) LOOP
    INSERT INTO COST_USAGE_TIMESERIES (
      DATE_BUCKET, GRANULARITY,
      BILLINGACCOUNTID, SUBACCOUNTNAME, INVOICEISSUER, REGION, BILLINGCURRENCY,
      SERVICECATEGORY, SERVICENAME, CHARGEDESCRIPTION, RESOURCETYPE, RESOURCEID,
      SKUID, PRICINGUNIT, OCI_COMPARTMENTID, OCI_COMPARTMENTNAME, USAGEUNIT,
      COST, USAGE, LAST_REFRESH
    )
    SELECT
      CASE granularity.g
        WHEN 'DAY' THEN TRUNC(CHARGEPERIODSTART, 'DDD')
        WHEN 'WEEK' THEN TRUNC(CHARGEPERIODSTART, 'IW')
        WHEN 'MONTH' THEN TRUNC(CHARGEPERIODSTART, 'MM')
      END AS DATE_BUCKET,
      granularity.g,
      BILLINGACCOUNTID, SUBACCOUNTNAME, INVOICEISSUER, REGION, BILLINGCURRENCY,
      NVL(SERVICECATEGORY, 'None'), SERVICENAME, CHARGEDESCRIPTION, RESOURCETYPE, RESOURCEID,
      SKUID, PRICINGUNIT, OCI_COMPARTMENTID, OCI_COMPARTMENTNAME, USAGEUNIT,
      SUM(BILLEDCOST),
      SUM(
        CASE 
          WHEN LOWER(USAGEUNIT) LIKE '%month%' THEN USAGEQUANTITY * (730/24)
          ELSE USAGEQUANTITY / 24
        END
      ),
      SYSDATE
    FROM FOCUS_REPORTS_PY
    WHERE CHARGEPERIODEND <= ADD_MONTHS(CHARGEPERIODSTART, 7)
    GROUP BY
      CASE granularity.g
        WHEN 'DAY' THEN TRUNC(CHARGEPERIODSTART, 'DDD')
        WHEN 'WEEK' THEN TRUNC(CHARGEPERIODSTART, 'IW')
        WHEN 'MONTH' THEN TRUNC(CHARGEPERIODSTART, 'MM')
      END,
      BILLINGACCOUNTID, SUBACCOUNTNAME, INVOICEISSUER, REGION, BILLINGCURRENCY,
      SERVICECATEGORY, SERVICENAME, CHARGEDESCRIPTION, RESOURCETYPE, RESOURCEID,
      SKUID, PRICINGUNIT, OCI_COMPARTMENTID, OCI_COMPARTMENTNAME, USAGEUNIT;
  END LOOP;

  -- Finalize the transaction
  COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure REFRESH_CREDIT_USAGE_AGG_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "OCI_FOCUS_REPORTS"."REFRESH_CREDIT_USAGE_AGG_PROC" AS
BEGIN
  EXECUTE IMMEDIATE 'TRUNCATE TABLE CREDIT_USAGE_AGG';

  INSERT INTO CREDIT_USAGE_AGG (BILLINGACCOUNTID, CHARGEPERIODEND, BILLEDCOST, HOURLY_COST)
  SELECT
    BILLINGACCOUNTID,
    TRUNC(CHARGEPERIODEND, 'HH') AS CHARGEPERIODEND,
    SUM(BILLEDCOST) AS BILLEDCOST,
    SUM(BILLEDCOST) / 1 AS HOURLY_COST
  FROM FOCUS_REPORTS_PY
  WHERE CHARGEPERIODEND >= SYSDATE - 30  -- or -90 for 3 months of history
  GROUP BY BILLINGACCOUNTID, TRUNC(CHARGEPERIODEND, 'HH');

  COMMIT;
END;

/
