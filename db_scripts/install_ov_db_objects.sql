--------------------------------------------------------
--  File created - Monday-June-23-2025   
--------------------------------------------------------

--------------------------------------------------------
--  DDL for Table APP_CONFIG
--------------------------------------------------------
CREATE TABLE "OCI_FOCUS_REPORTS"."APP_CONFIG" (
  CONFIG_KEY     VARCHAR2(100) PRIMARY KEY,
  CONFIG_VALUE   VARCHAR2(4000),
  UPDATED_AT     DATE DEFAULT SYSDATE
);

--------------------------------------------------------
--  DDL for Table AI_MODEL_CONFIG
--------------------------------------------------------
CREATE TABLE "OCI_FOCUS_REPORTS"."AI_MODEL_CONFIG" 
    ( 
     MODEL_ID          VARCHAR2 (1000) , 
     MODEL_NAME        VARCHAR2 (1000) , 
     API_FORMAT        VARCHAR2 (50) , 
     IS_DEFAULT        VARCHAR2 (1) , 
     REGION            VARCHAR2 (50) , 
     TEMPERATURE       NUMBER , 
     TOP_P             NUMBER , 
     TOP_K             NUMBER , 
     FREQUENCY_PENALTY NUMBER , 
     PRESENCE_PENALTY  NUMBER 
    );

--------------------------------------------------------
--  DDL for Table AI_PROMPT_COMPONENTS
--------------------------------------------------------
CREATE TABLE "OCI_FOCUS_REPORTS"."AI_PROMPT_COMPONENTS"
    ( 
     ID NUMBER GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 CACHE 20 ) , 
     COMPONENT_TYPE VARCHAR2 (50) , 
     CONTENT        CLOB , 
     UPDATED_AT     TIMESTAMP DEFAULT SYSTIMESTAMP,
     PRIMARY KEY ("ID") USING INDEX  ENABLE
    );

--------------------------------------------------------
--  DDL for Table AI_PROMPT_EXAMPLES
--------------------------------------------------------
CREATE TABLE "OCI_FOCUS_REPORTS"."AI_PROMPT_EXAMPLES"
    ( 
     ID NUMBER GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 CACHE 20 ) , 
     EXAMPLE_ORDER NUMBER , 
     USER_QUESTION VARCHAR2 (1000) , 
     ORACLE_SQL    CLOB , 
     UPDATED_AT    TIMESTAMP DEFAULT SYSTIMESTAMP,
     PRIMARY KEY ("ID") USING INDEX  ENABLE
    );
--------------------------------------------------------
--  DDL for Table CREDIT_CONSUMPTION_STATE
--------------------------------------------------------
CREATE TABLE "OCI_FOCUS_REPORTS"."CREDIT_CONSUMPTION_STATE" (
  SUBSCRIPTION_ID      VARCHAR2(100),
  BILLINGACCOUNTID     VARCHAR2(100),
  ORDER_NUMBER         VARCHAR2(100),
  TIME_START           DATE,
  TIME_END             DATE,
  ORIGINAL_QUANTITY    NUMBER,
  REMAINING_QUANTITY   NUMBER,
  DEPLETED             BOOLEAN,
  LAST_CONSUMED_AT     DATE,
  ISO_CODE             VARCHAR2(10),
  LAST_UPDATED         DATE DEFAULT SYSDATE
);
--------------------------------------------------------
--  DDL for Table AI_CHAT_LOG
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."AI_CHAT_LOG"
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE,
	"CHAT_ID" NUMBER,
	"APP_USER" VARCHAR2(255) COLLATE "USING_NLS_COMP",
	"SESSION_ID" VARCHAR2(255) COLLATE "USING_NLS_COMP",
	"USER_MESSAGE" CLOB COLLATE "USING_NLS_COMP",
	"GENERATED_SQL" CLOB COLLATE "USING_NLS_COMP",
	"EXECUTION_DATA" CLOB COLLATE "USING_NLS_COMP",
	"RAW_RESPONSE" CLOB COLLATE "USING_NLS_COMP",
	"SUMMARY_TEXT" CLOB COLLATE "USING_NLS_COMP",
	"REASONED_MESSAGE" CLOB COLLATE "USING_NLS_COMP",
	"CREATED_AT" TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table AI_CHAT_LOG_REASONING
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."AI_CHAT_LOG_REASONING"
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE,
	"CHAT_ID" NUMBER,
	"LOG_ID" NUMBER,
	"INPUT_MESSAGE" CLOB COLLATE "USING_NLS_COMP",
	"REPHRASED_OUTPUT" CLOB COLLATE "USING_NLS_COMP",
	"ATTEMPT_NUMBER" NUMBER,
	"APP_USER" VARCHAR2(255) COLLATE "USING_NLS_COMP",
	"CREATED_AT" TIMESTAMP (6) DEFAULT SYSTIMESTAMP,
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table COST_USAGE_TIMESERIES_DAILY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."COST_USAGE_TIMESERIES_DAILY" 
   (	"DATE_BUCKET" DATE,
	"BILLINGACCOUNTID" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"SUBACCOUNTNAME" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"INVOICEISSUER" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"REGION" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"BILLINGCURRENCY" VARCHAR2(20) COLLATE "USING_NLS_COMP", 
	"SERVICECATEGORY" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"SERVICENAME" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"CHARGEDESCRIPTION" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"RESOURCETYPE" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"RESOURCEID" VARCHAR2(400) COLLATE "USING_NLS_COMP",
  "RESOURCENAME" VARCHAR2(1000) COLLATE "USING_NLS_COMP",
	"SKUID" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"PRICINGUNIT" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"OCI_COMPARTMENTID" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"OCI_COMPARTMENTNAME" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
  "OCI_COMPARTMENT_PATH" VARCHAR2(4000) COLLATE "USING_NLS_COMP",
	"USAGEUNIT" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"COST" NUMBER(20,6), 
	"USAGE" NUMBER(20,6), 
	"LAST_REFRESH" DATE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table COST_USAGE_TIMESERIES_WEEKLY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."COST_USAGE_TIMESERIES_WEEKLY" 
   (	"DATE_BUCKET" DATE, 
	"BILLINGACCOUNTID" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"SUBACCOUNTNAME" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"INVOICEISSUER" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"REGION" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"BILLINGCURRENCY" VARCHAR2(20) COLLATE "USING_NLS_COMP", 
	"SERVICECATEGORY" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"SERVICENAME" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"CHARGEDESCRIPTION" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"RESOURCETYPE" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"RESOURCEID" VARCHAR2(400) COLLATE "USING_NLS_COMP",
  "RESOURCENAME" VARCHAR2(1000) COLLATE "USING_NLS_COMP",
	"SKUID" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"PRICINGUNIT" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"OCI_COMPARTMENTID" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"OCI_COMPARTMENTNAME" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
  "OCI_COMPARTMENT_PATH" VARCHAR2(4000) COLLATE "USING_NLS_COMP",
	"USAGEUNIT" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"COST" NUMBER(20,6), 
	"USAGE" NUMBER(20,6), 
	"LAST_REFRESH" DATE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table COST_USAGE_TIMESERIES_MONTHLY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."COST_USAGE_TIMESERIES_MONTHLY" 
   (	"DATE_BUCKET" DATE, 
	"BILLINGACCOUNTID" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"SUBACCOUNTNAME" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"INVOICEISSUER" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"REGION" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"BILLINGCURRENCY" VARCHAR2(20) COLLATE "USING_NLS_COMP", 
	"SERVICECATEGORY" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"SERVICENAME" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"CHARGEDESCRIPTION" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"RESOURCETYPE" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"RESOURCEID" VARCHAR2(400) COLLATE "USING_NLS_COMP",
  "RESOURCENAME" VARCHAR2(1000) COLLATE "USING_NLS_COMP",
	"SKUID" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"PRICINGUNIT" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"OCI_COMPARTMENTID" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"OCI_COMPARTMENTNAME" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
  "OCI_COMPARTMENT_PATH" VARCHAR2(4000) COLLATE "USING_NLS_COMP",
	"USAGEUNIT" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"COST" NUMBER(20,6), 
	"USAGE" NUMBER(20,6), 
	"LAST_REFRESH" DATE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table CREDIT_USAGE_AGG
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."CREDIT_USAGE_AGG" 
   (	"BILLINGACCOUNTID" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"CHARGEPERIODEND" DATE, 
	"BILLEDCOST" NUMBER, 
	"HOURLY_COST" NUMBER, 
	"INSERTED_AT" DATE DEFAULT SYSDATE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table FOCUS_REPORTS_PY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."FOCUS_REPORTS_PY" 
   (	"AVAILABILITYZONE" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"BILLEDCOST" NUMBER, 
	"BILLINGACCOUNTID" NUMBER, 
	"BILLINGACCOUNTNAME" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"BILLINGCURRENCY" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"BILLINGPERIODEND" TIMESTAMP (6), 
	"BILLINGPERIODSTART" TIMESTAMP (6), 
	"CHARGECATEGORY" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"CHARGEDESCRIPTION" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"CHARGEFREQUENCY" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"CHARGEPERIODEND" TIMESTAMP (6), 
	"CHARGEPERIODSTART" TIMESTAMP (6), 
	"CHARGESUBCATEGORY" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"COMMITMENTDISCOUNTCATEGORY" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"COMMITMENTDISCOUNTID" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"COMMITMENTDISCOUNTNAME" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"COMMITMENTDISCOUNTTYPE" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"EFFECTIVECOST" NUMBER, 
	"INVOICEISSUER" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"LISTCOST" NUMBER, 
	"LISTUNITPRICE" NUMBER, 
	"PRICINGCATEGORY" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"PRICINGQUANTITY" NUMBER, 
	"PRICINGUNIT" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"PROVIDER" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"PUBLISHER" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"REGION" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"RESOURCEID" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"RESOURCENAME" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"RESOURCETYPE" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"SERVICECATEGORY" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"SERVICENAME" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"SKUID" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"SKUPRICEID" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"SUBACCOUNTID" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"SUBACCOUNTNAME" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"TAGS" CLOB COLLATE "USING_NLS_COMP", 
	"USAGEQUANTITY" NUMBER, 
	"USAGEUNIT" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"OCI_REFERENCENUMBER" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"OCI_COMPARTMENTID" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"OCI_COMPARTMENTNAME" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"OCI_OVERAGEFLAG" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"OCI_UNITPRICEOVERAGE" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"OCI_BILLEDQUANTITYOVERAGE" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"OCI_COSTOVERAGE" VARCHAR2(32767) COLLATE "USING_NLS_COMP", 
	"OCI_ATTRIBUTEDUSAGE" NUMBER, 
	"OCI_ATTRIBUTEDCOST" NUMBER, 
	"OCI_BACKREFERENCENUMBER" VARCHAR2(4000) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" 
  PARTITION BY RANGE ("CHARGEPERIODSTART") INTERVAL (NUMTOYMINTERVAL(1, 'MONTH')) 
 (PARTITION "P_BEFORE_2024"  VALUES LESS THAN (TIMESTAMP' 2024-01-01 00:00:00') ) ;
 CREATE INDEX "OCI_FOCUS_REPORTS"."IDX_CREDIT_AGG_BILLING" ON "OCI_FOCUS_REPORTS"."CREDIT_USAGE_AGG" ("BILLINGACCOUNTID", "CHARGEPERIODEND") 
  ;

  CREATE INDEX "OCI_FOCUS_REPORTS"."IDX_FOCUS_REPORTS_OCI_REF" ON "OCI_FOCUS_REPORTS"."FOCUS_REPORTS_PY" ("OCI_REFERENCENUMBER") 
  ;

  CREATE INDEX "OCI_FOCUS_REPORTS"."IDX_FRP_CPE" ON "OCI_FOCUS_REPORTS"."FOCUS_REPORTS_PY" ("CHARGEPERIODEND") 
  ;

  CREATE INDEX "OCI_FOCUS_REPORTS"."IDX_FRP_BAID_CPE" ON "OCI_FOCUS_REPORTS"."FOCUS_REPORTS_PY" ("BILLINGACCOUNTID", "CHARGEPERIODEND") 
  ;
--------------------------------------------------------
--  DDL for Table OCI_AVAILABILITY_METRICS_PY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_AVAILABILITY_METRICS_PY" 
   (	"RESOURCEDISPLAYNAME" VARCHAR2(64) COLLATE "USING_NLS_COMP", 
	"TIMESTAMP" TIMESTAMP (6), 
	"NAMESPACE" VARCHAR2(64) COLLATE "USING_NLS_COMP", 
	"COMPARTMENT_ID" VARCHAR2(256) COLLATE "USING_NLS_COMP", 
	"VALUE" NUMBER, 
	"METRIC_NAME" VARCHAR2(128) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" 
  PARTITION BY RANGE ("TIMESTAMP") INTERVAL (NUMTOYMINTERVAL(1, 'MONTH')) 
 (PARTITION "OCI_AVAILABILITY_METRICS_PY_BEFORE_2022"  VALUES LESS THAN (TIMESTAMP' 2022-01-01 00:00:00') ) ;
--------------------------------------------------------
--  DDL for Table OCI_COMPARTMENTS_PY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_COMPARTMENTS_PY" 
   (	"COMPARTMENT_ID" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"NAME" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"DESCRIPTION" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"LIFECYCLE_STATE" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"TIME_CREATED" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"PARENT_ID" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"PARENT" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"PATH" VARCHAR2(4000) COLLATE "USING_NLS_COMP", 
	"TENANCY_ID" VARCHAR2(2000) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table OCI_EXA_MAINTENANCE_PY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_EXA_MAINTENANCE_PY" 
   (	"ID" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"COMPARTMENT_ID" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"CURRENT_CUSTOM_ACTION_TIMEOUT_IN_MINS" NUMBER, 
	"CURRENT_PATCHING_COMPONENT" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"CUSTOM_ACTION_TIMEOUT_IN_MINS" NUMBER, 
	"DATABASE_SOFTWARE_IMAGE_ID" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"DESCRIPTION" VARCHAR2(10000) COLLATE "USING_NLS_COMP", 
	"DISPLAY_NAME" VARCHAR2(500) COLLATE "USING_NLS_COMP", 
	"ESTIMATED_DB_SERVER_PATCHING_TIME" NUMBER, 
	"ESTIMATED_NETWORK_SWITCHES_PATCHING_TIME" NUMBER, 
	"ESTIMATED_STORAGE_SERVER_PATCHING_TIME" NUMBER, 
	"TOTAL_ESTIMATED_PATCHING_TIME" NUMBER, 
	"IS_CUSTOM_ACTION_TIMEOUT_ENABLED" VARCHAR2(10) COLLATE "USING_NLS_COMP", 
	"IS_DST_FILE_UPDATE_ENABLED" VARCHAR2(10) COLLATE "USING_NLS_COMP", 
	"IS_MAINTENANCE_RUN_GRANULAR" VARCHAR2(10) COLLATE "USING_NLS_COMP", 
	"LIFECYCLE_DETAILS" VARCHAR2(10000) COLLATE "USING_NLS_COMP", 
	"LIFECYCLE_STATE" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"MAINTENANCE_SUBTYPE" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"MAINTENANCE_TYPE" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"PATCH_FAILURE_COUNT" NUMBER, 
	"PATCH_ID" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"PATCHING_END_TIME" TIMESTAMP (6), 
	"PATCHING_MODE" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"PATCHING_START_TIME" TIMESTAMP (6), 
	"PATCHING_STATUS" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"PEER_MAINTENANCE_RUN_ID" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"PEER_MAINTENANCE_RUN_IDS" CLOB COLLATE "USING_NLS_COMP", 
	"TARGET_DB_SERVER_VERSION" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"TARGET_RESOURCE_ID" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"TARGET_RESOURCE_TYPE" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"TARGET_STORAGE_SERVER_VERSION" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"TIME_ENDED" TIMESTAMP (6), 
	"TIME_SCHEDULED" TIMESTAMP (6), 
	"TIME_STARTED" TIMESTAMP (6), 
	"TOTAL_TIME_TAKEN_IN_MINS" NUMBER
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table OCI_RESOURCES_PY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_RESOURCES_PY" 
   (	"DISPLAY_NAME" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"IDENTIFIER" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	"REGION" VARCHAR2(60) COLLATE "USING_NLS_COMP",
  "RESOURCE_TYPE" VARCHAR2(100) COLLATE "USING_NLS_COMP",
  "DEFINED_TAGS" CLOB COLLATE "USING_NLS_COMP",
  "FREEFORM_TAGS" CLOB COLLATE "USING_NLS_COMP",
  "COMPARTMENT_ID" VARCHAR2(255) COLLATE "USING_NLS_COMP",
  "SYSTEM_TAGS" CLOB COLLATE "USING_NLS_COMP",
  "AVAILABILITY_DOMAIN" VARCHAR2(100) COLLATE "USING_NLS_COMP",
  "TIME_CREATED" TIMESTAMP (6),
  "ADDITIONAL_DETAILS" CLOB COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" ;

--------------------------------------------------------
--  DDL for Table OCI_SUBSCRIPTIONS_PY
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_SUBSCRIPTIONS_PY" 
   (	"SUBSCRIPTION_ID" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"ISO_CODE" VARCHAR2(10) COLLATE "USING_NLS_COMP", 
	"NAME" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"STD_PRECISION" NUMBER, 
	"SERVICE_NAME" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"STATUS" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"AVAILABLE_AMOUNT" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"BOOKING_OPTY_NUMBER" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"COMMITMENT_SERVICES" CLOB COLLATE "USING_NLS_COMP", 
	"CSI" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"DATA_CENTER_REGION" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"FUNDED_ALLOCATION_VALUE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"ID" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"IS_INTENT_TO_PAY" VARCHAR2(10) COLLATE "USING_NLS_COMP", 
	"NET_UNIT_PRICE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"OPERATION_TYPE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"ORDER_NUMBER" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"ORIGINAL_PROMO_AMOUNT" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PARTNER_TRANSACTION_TYPE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PRICING_MODEL" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PRODUCT_NAME" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"PRODUCT_PART_NUMBER" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PRODUCT_PROVISIONING_GROUP" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PRODUCT_UNIT_OF_MEASURE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PROGRAM_TYPE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"PROMO_TYPE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"QUANTITY" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"SUBSTATUS" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"TIME_END" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"TIME_START" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"TOTAL_VALUE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"USED_AMOUNT" VARCHAR2(100) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table OCI_SUBSCRIPTION_DETAILS
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_SUBSCRIPTION_DETAILS"
   (	"SUBSCRIPTION_ID" NUMBER,
	"ORDER_ID" NUMBER,
	"ORDER_NAME" VARCHAR2(1000) COLLATE "USING_NLS_COMP",
	"QUANTITY" NUMBER,
	"TIME_START" DATE,
	"TIME_END" DATE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;

--------------------------------------------------------
--  DDL for Table OCI_WORKLOADS
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_WORKLOADS"
   (	"WORKLOAD_NAME" VARCHAR2(100) COLLATE "USING_NLS_COMP",
	"VALUE" CLOB COLLATE "USING_NLS_COMP",
	 CONSTRAINT "OCI_WORKLOADS_PK" PRIMARY KEY ("WORKLOAD_NAME")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;

--------------------------------------------------------
--  DDL for Table PAGE1_CONS_WRKLD_MONTH_CHART_DATA
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."PAGE1_CONS_WRKLD_MONTH_CHART_DATA" 
   (	"WORKLOAD_NAME" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"MONTH" DATE, 
	"COST" NUMBER, 
	"LAST_REFRESH" DATE,
	 PRIMARY KEY ("WORKLOAD_NAME", "MONTH")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;
--------------------------------------------------------
--  DDL for Table PAGE1_CONS_WRKLD_WEEK_CHART_DATA
--------------------------------------------------------

  CREATE TABLE "OCI_FOCUS_REPORTS"."PAGE1_CONS_WRKLD_WEEK_CHART_DATA" 
   (	"WORKLOAD_NAME" VARCHAR2(400) COLLATE "USING_NLS_COMP", 
	"WEEK_START" DATE, 
	"COST" NUMBER, 
	"LAST_REFRESH" DATE,
	 PRIMARY KEY ("WORKLOAD_NAME", "WEEK_START")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;

--------------------------------------------------------
--  DDL for Table OCI_RESOURCE_RELATIONSHIPS
--------------------------------------------------------
CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_RESOURCE_RELATIONSHIPS" (
    "CHILD_DISPLAY_NAME"      VARCHAR2(1000) COLLATE "USING_NLS_COMP",
    "CHILD_RESOURCE_TYPE"     VARCHAR2(100) COLLATE "USING_NLS_COMP",
    "PARENT_DISPLAY_NAME"     VARCHAR2(1000) COLLATE "USING_NLS_COMP",
    "PARENT_RESOURCE_TYPE"    VARCHAR2(100) COLLATE "USING_NLS_COMP",
    "RAW_CREATED_BY"          VARCHAR2(1000) COLLATE "USING_NLS_COMP",
    "NORMALIZED_CREATED_BY"   VARCHAR2(1000) COLLATE "USING_NLS_COMP",
    "SNAPSHOT_DATE"           DATE DEFAULT SYSDATE
);

--------------------------------------------------------
--  DDL for Table OCI_RESOURCE_OKE_RELATIONSHIPS
--------------------------------------------------------
CREATE TABLE "OCI_FOCUS_REPORTS"."OCI_RESOURCE_OKE_RELATIONSHIPS" (
    "CHILD_DISPLAY_NAME"       VARCHAR2(1000) COLLATE "USING_NLS_COMP",
    "CHILD_RESOURCE_TYPE"      VARCHAR2(100) COLLATE "USING_NLS_COMP",
    "PARENT_DISPLAY_NAME"      VARCHAR2(1000) COLLATE "USING_NLS_COMP",
    "PARENT_RESOURCE_TYPE"     VARCHAR2(100) COLLATE "USING_NLS_COMP",
    "NODE_TYPE"                VARCHAR2(100) COLLATE "USING_NLS_COMP",
    "RAW_CLUSTER_ID"           VARCHAR2(1000) COLLATE "USING_NLS_COMP",
    "NORMALIZED_CLUSTER_ID"    VARCHAR2(1000) COLLATE "USING_NLS_COMP",
    "SNAPSHOT_DATE"            DATE DEFAULT SYSDATE
);
--------------------------------------------------------
--  DDL for Materialized View FILTER_VALUES_MV
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OCI_FOCUS_REPORTS"."FILTER_VALUES_MV" ("SUBACCOUNTNAME", "BILLINGACCOUNTID", "REGION", "OCI_COMPARTMENTID", "SERVICECATEGORY", "SERVICENAME", "CHARGEDESCRIPTION", "RESOURCETYPE", "RESOURCEID", "RESOURCENAME")
  DEFAULT COLLATION "USING_NLS_COMP"  SEGMENT CREATION IMMEDIATE
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
  COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE ON QUERY COMPUTATION DISABLE QUERY REWRITE DISABLE CONCURRENT REFRESH
  AS SELECT DISTINCT
  fr.SUBACCOUNTNAME,
  fr.BILLINGACCOUNTID,
  fr.REGION,
  fr.OCI_COMPARTMENTID,
  fr.SERVICECATEGORY,
  fr.SERVICENAME,
  fr.CHARGEDESCRIPTION,
  fr.RESOURCETYPE,
  fr.RESOURCEID,
  r.DISPLAY_NAME AS RESOURCENAME
FROM FOCUS_REPORTS_PY fr
LEFT JOIN OCI_RESOURCES_PY r
  ON r.IDENTIFIER = fr.RESOURCEID
  WHERE fr.REGION != 'Commitment Expiration';

   COMMENT ON MATERIALIZED VIEW "OCI_FOCUS_REPORTS"."FILTER_VALUES_MV"  IS 'snapshot table for snapshot OCI_FOCUS_REPORTS.FILTER_VALUES_MV';
--------------------------------------------------------
--  DDL for Materialized View RATECARD_MV
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OCI_FOCUS_REPORTS"."RATECARD_MV" ("CHARGEDESCRIPTION", "PRICINGUNIT", "SKUID", "ACTUALUNITPRICE", "LISTUNITPRICE")
  DEFAULT COLLATION "USING_NLS_COMP"  SEGMENT CREATION IMMEDIATE
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
  COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH COMPLETE ON DEMAND START WITH sysdate+0 NEXT TO_DATE(SYSDATE + 1)
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE ON QUERY COMPUTATION DISABLE QUERY REWRITE DISABLE CONCURRENT REFRESH
  AS SELECT 
      CHARGEDESCRIPTION, 
      PRICINGUNIT,
      MIN(SKUID) AS SKUID, 
      AVG(ROUND(EFFECTIVECOST / PRICINGQUANTITY, 4)) AS ACTUALUNITPRICE, 
      MAX(LISTUNITPRICE) AS LISTUNITPRICE
  FROM 
      FOCUS_REPORTS_PY
  WHERE 
      PRICINGQUANTITY > 0
      AND UPPER(CHARGEDESCRIPTION) NOT LIKE '%FREE%'
      AND BILLINGACCOUNTID IN (
          SELECT DISTINCT SUBSCRIPTION_ID
          FROM OCI_SUBSCRIPTION_DETAILS
      )
      AND CHARGECATEGORY = 'Usage'
  GROUP BY 
      BILLINGACCOUNTID, 
      CHARGEDESCRIPTION, 
      PRICINGUNIT;

   COMMENT ON MATERIALIZED VIEW "OCI_FOCUS_REPORTS"."RATECARD_MV"  IS 'snapshot table for snapshot USAGE.RATECARD_MV';

--------------------------------------------------------
--  DDL for Function json_escape
--------------------------------------------------------
CREATE OR REPLACE FUNCTION json_escape(p_text IN VARCHAR2) RETURN VARCHAR2 IS
  l_result VARCHAR2(32767);
BEGIN
  l_result := REPLACE(p_text, '\', '\\');        -- escape backslashes
  l_result := REPLACE(l_result, '"', '\"');      -- escape double quotes
  l_result := REPLACE(l_result, CHR(10), '\n');  -- line feed
  l_result := REPLACE(l_result, CHR(13), '');    -- carriage return
  RETURN l_result;
END;
/
--------------------------------------------------------
--  DDL for Procedure POPULATE_RESOURCE_RELATIONSHIPS_PROC
--------------------------------------------------------
CREATE OR REPLACE PROCEDURE "OCI_FOCUS_REPORTS"."POPULATE_RESOURCE_RELATIONSHIPS_PROC" IS
BEGIN
    -- Optional: Clear old data first
    EXECUTE IMMEDIATE 'TRUNCATE TABLE OCI_RESOURCE_RELATIONSHIPS';

    INSERT INTO OCI_FOCUS_REPORTS.OCI_RESOURCE_RELATIONSHIPS (
        CHILD_DISPLAY_NAME,
        CHILD_RESOURCE_TYPE,
        PARENT_DISPLAY_NAME,
        PARENT_RESOURCE_TYPE,
        RAW_CREATED_BY,
        NORMALIZED_CREATED_BY,
        SNAPSHOT_DATE
    )
    SELECT 
        child.DISPLAY_NAME,
        child.RESOURCE_TYPE,
        parent.DISPLAY_NAME,
        parent.RESOURCE_TYPE,
        JSON_VALUE(child.DEFINED_TAGS, '$."Oracle-Tags"."CreatedBy"'),
        REGEXP_REPLACE(
            JSON_VALUE(child.DEFINED_TAGS, '$."Oracle-Tags"."CreatedBy"'),
            '^default/', 
            ''
        ),
        SYSDATE
    FROM 
        OCI_FOCUS_REPORTS.OCI_RESOURCES_PY child
    LEFT JOIN 
        OCI_FOCUS_REPORTS.OCI_RESOURCES_PY parent
        ON REGEXP_REPLACE(
               JSON_VALUE(child.DEFINED_TAGS, '$."Oracle-Tags"."CreatedBy"'),
               '^default/', 
               ''
           ) IN (parent.DISPLAY_NAME, parent.IDENTIFIER)
    WHERE 
        JSON_VALUE(child.DEFINED_TAGS, '$."Oracle-Tags"."CreatedBy"') IS NOT NULL;

    COMMIT;
END;
/
--------------------------------------------------------
--  DDL for Procedure POPULATE_OKE_RELATIONSHIPS_PROC
--------------------------------------------------------
CREATE OR REPLACE PROCEDURE "OCI_FOCUS_REPORTS"."POPULATE_OKE_RELATIONSHIPS_PROC" IS
BEGIN
    -- Optional: Clear old data
    EXECUTE IMMEDIATE 'TRUNCATE TABLE OCI_RESOURCE_OKE_RELATIONSHIPS';

    INSERT INTO OCI_FOCUS_REPORTS.OCI_RESOURCE_OKE_RELATIONSHIPS (
        CHILD_DISPLAY_NAME,
        CHILD_RESOURCE_TYPE,
        PARENT_DISPLAY_NAME,
        PARENT_RESOURCE_TYPE,
        RAW_CLUSTER_ID,
        NORMALIZED_CLUSTER_ID,
        NODE_TYPE,
        SNAPSHOT_DATE
    )
    SELECT 
        child.DISPLAY_NAME,
        child.RESOURCE_TYPE,
        parent.DISPLAY_NAME,
        parent.RESOURCE_TYPE,
        JSON_VALUE(child.SYSTEM_TAGS, '$."orcl-containerengine".Cluster'),
        REGEXP_REPLACE(
            JSON_VALUE(child.SYSTEM_TAGS, '$."orcl-containerengine".Cluster'),
            '^default/',
            ''
        ),
        JSON_VALUE(child.SYSTEM_TAGS, '$."orcl-containerengine".NodeType'),
        SYSDATE
    FROM 
        OCI_FOCUS_REPORTS.OCI_RESOURCES_PY child
    LEFT JOIN 
        OCI_FOCUS_REPORTS.OCI_RESOURCES_PY parent
        ON REGEXP_REPLACE(
               JSON_VALUE(child.SYSTEM_TAGS, '$."orcl-containerengine".Cluster'),
               '^default/',
               ''
           ) IN (parent.DISPLAY_NAME, parent.IDENTIFIER)
    WHERE 
        JSON_EXISTS(child.SYSTEM_TAGS, '$."orcl-containerengine".Cluster')
        AND JSON_VALUE(child.SYSTEM_TAGS, '$."orcl-containerengine".Cluster') IS NOT NULL;

    COMMIT;
END;
/
--------------------------------------------------------
--  DDL for Procedure PAGE1_CONS_WRKLD_MONTH_CHART_DATA_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "OCI_FOCUS_REPORTS"."PAGE1_CONS_WRKLD_MONTH_CHART_DATA_PROC" AS
  l_title   VARCHAR2(400);
  l_value   CLOB;
BEGIN
  -- Truncate the table once before processing
  EXECUTE IMMEDIATE 'TRUNCATE TABLE PAGE1_CONS_WRKLD_MONTH_CHART_DATA';

  -- Loop through top N rows by row_number
  FOR rec IN (
    SELECT DBMS_LOB.SUBSTR(WORKLOAD_NAME, 4000) AS WORKLOAD_NAME,
           DBMS_LOB.SUBSTR(VALUE, 4000) AS COMPARTMENTS,
           ROW_NUMBER() OVER (ORDER BY WORKLOAD_NAME) AS rn
    FROM OCI_WORKLOADS
    WHERE VALUE IS NOT NULL
  ) LOOP
    -- Skip empty compartment lists
    IF rec.COMPARTMENTS IS NOT NULL THEN
      -- Insert aggregated data
      INSERT INTO PAGE1_CONS_WRKLD_MONTH_CHART_DATA (
        WORKLOAD_NAME,
        MONTH,
        COST,
        LAST_REFRESH
      )
      SELECT
        rec.WORKLOAD_NAME,
        TRUNC(CHARGEPERIODEND, 'MM') AS MONTH,
        SUM(BILLEDCOST) AS COST,
        SYSDATE
      FROM FOCUS_REPORTS_PY
      WHERE CHARGEPERIODEND >= ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -12)
        AND OCI_COMPARTMENTID IN (
          SELECT TRIM(column_value)
          FROM TABLE(APEX_STRING.SPLIT(rec.COMPARTMENTS, ','))
        )
      GROUP BY TRUNC(CHARGEPERIODEND, 'MM');
    END IF;
  END LOOP;
  -- Ensure all changes are committed
  COMMIT;
END;
/
--------------------------------------------------------
--  DDL for Procedure PAGE1_CONS_WRKLD_WEEK_CHART_DATA_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "OCI_FOCUS_REPORTS"."PAGE1_CONS_WRKLD_WEEK_CHART_DATA_PROC" AS
  l_title   VARCHAR2(400);
  l_value   CLOB;
BEGIN
  -- Truncate the entire table before inserting fresh data
  EXECUTE IMMEDIATE 'TRUNCATE TABLE PAGE1_CONS_WRKLD_WEEK_CHART_DATA';

  -- Loop through top N rows by row_number
  FOR rec IN (
    SELECT DBMS_LOB.SUBSTR(WORKLOAD_NAME, 4000) AS WORKLOAD_NAME,
           DBMS_LOB.SUBSTR(VALUE, 4000) AS COMPARTMENTS,
           ROW_NUMBER() OVER (ORDER BY WORKLOAD_NAME) AS rn
    FROM OCI_WORKLOADS
    WHERE VALUE IS NOT NULL
  ) LOOP
    -- Skip if compartment list is empty
    IF rec.COMPARTMENTS IS NOT NULL THEN
      -- Insert new aggregated data
      INSERT INTO PAGE1_CONS_WRKLD_WEEK_CHART_DATA (
        WORKLOAD_NAME,
        WEEK_START,
        COST,
        LAST_REFRESH
      )
      SELECT
        rec.WORKLOAD_NAME,
        TRUNC(CHARGEPERIODEND, 'IW') AS WEEK_START,
        SUM(BILLEDCOST) AS COST,
        SYSDATE
      FROM FOCUS_REPORTS_PY
      WHERE CHARGEPERIODEND >= TRUNC(SYSDATE, 'IW') - INTERVAL '56' DAY
        AND CHARGEPERIODEND < TRUNC(SYSDATE, 'IW') -- Exclude current week
        AND OCI_COMPARTMENTID IN (
          SELECT TRIM(column_value)
          FROM TABLE(APEX_STRING.SPLIT(rec.COMPARTMENTS, ','))
        )
      GROUP BY TRUNC(CHARGEPERIODEND, 'IW');
    END IF;
  END LOOP;
  -- Ensure all changes are committed
  COMMIT;
END;
/
--------------------------------------------------------
--  DDL for Procedure REFRESH_COST_USAGE_TS_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE OCI_FOCUS_REPORTS.REFRESH_COST_USAGE_TS_PROC AS
BEGIN
  -- Truncate all three tables
  EXECUTE IMMEDIATE 'TRUNCATE TABLE COST_USAGE_TIMESERIES_DAILY';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE COST_USAGE_TIMESERIES_WEEKLY';
  EXECUTE IMMEDIATE 'TRUNCATE TABLE COST_USAGE_TIMESERIES_MONTHLY';

  -- Insert into COST_USAGE_TS_DAY
  INSERT INTO COST_USAGE_TIMESERIES_DAILY (
    DATE_BUCKET, BILLINGACCOUNTID, SUBACCOUNTNAME, INVOICEISSUER, REGION, BILLINGCURRENCY,
    SERVICECATEGORY, SERVICENAME, CHARGEDESCRIPTION, RESOURCETYPE, RESOURCEID, RESOURCENAME,
    SKUID, PRICINGUNIT, OCI_COMPARTMENTID, OCI_COMPARTMENTNAME, OCI_COMPARTMENT_PATH, USAGEUNIT,
    COST, USAGE, LAST_REFRESH
  )
  SELECT
    TRUNC(fr.CHARGEPERIODSTART, 'DDD'),
    fr.BILLINGACCOUNTID, fr.SUBACCOUNTNAME, fr.INVOICEISSUER, fr.REGION, fr.BILLINGCURRENCY,
    NVL(fr.SERVICECATEGORY, 'None'), fr.SERVICENAME, fr.CHARGEDESCRIPTION, fr.RESOURCETYPE, fr.RESOURCEID,
    orp.DISPLAY_NAME AS RESOURCENAME,
    fr.SKUID, fr.PRICINGUNIT, fr.OCI_COMPARTMENTID, fr.OCI_COMPARTMENTNAME, ocp.PATH, fr.USAGEUNIT,
    SUM(fr.BILLEDCOST),
    SUM(
      CASE
        WHEN LOWER(fr.USAGEUNIT) LIKE '%month%' THEN fr.USAGEQUANTITY * (730 / 24)
        ELSE fr.USAGEQUANTITY / 24
      END
    ),
    SYSDATE
  FROM FOCUS_REPORTS_PY fr
  LEFT JOIN OCI_RESOURCES_PY orp ON fr.RESOURCEID = orp.IDENTIFIER
  LEFT JOIN OCI_COMPARTMENTS_PY ocp ON fr.OCI_COMPARTMENTID = ocp.COMPARTMENT_ID
  WHERE fr.CHARGEPERIODEND <= ADD_MONTHS(fr.CHARGEPERIODSTART, 7)
  GROUP BY
    TRUNC(fr.CHARGEPERIODSTART, 'DDD'),
    fr.BILLINGACCOUNTID, fr.SUBACCOUNTNAME, fr.INVOICEISSUER, fr.REGION, fr.BILLINGCURRENCY,
    fr.SERVICECATEGORY, fr.SERVICENAME, fr.CHARGEDESCRIPTION, fr.RESOURCETYPE, fr.RESOURCEID,
    orp.DISPLAY_NAME, fr.SKUID, fr.PRICINGUNIT, fr.OCI_COMPARTMENTID, fr.OCI_COMPARTMENTNAME,
    ocp.PATH, fr.USAGEUNIT;

  -- Repeat for WEEK
  INSERT INTO COST_USAGE_TIMESERIES_WEEKLY (
    DATE_BUCKET, BILLINGACCOUNTID, SUBACCOUNTNAME, INVOICEISSUER, REGION, BILLINGCURRENCY,
    SERVICECATEGORY, SERVICENAME, CHARGEDESCRIPTION, RESOURCETYPE, RESOURCEID, RESOURCENAME,
    SKUID, PRICINGUNIT, OCI_COMPARTMENTID, OCI_COMPARTMENTNAME, OCI_COMPARTMENT_PATH, USAGEUNIT,
    COST, USAGE, LAST_REFRESH
  )
  SELECT
    TRUNC(fr.CHARGEPERIODSTART, 'IW'),
    fr.BILLINGACCOUNTID, fr.SUBACCOUNTNAME, fr.INVOICEISSUER, fr.REGION, fr.BILLINGCURRENCY,
    NVL(fr.SERVICECATEGORY, 'None'), fr.SERVICENAME, fr.CHARGEDESCRIPTION, fr.RESOURCETYPE, fr.RESOURCEID,
    orp.DISPLAY_NAME AS RESOURCENAME,
    fr.SKUID, fr.PRICINGUNIT, fr.OCI_COMPARTMENTID, fr.OCI_COMPARTMENTNAME, ocp.PATH, fr.USAGEUNIT,
    SUM(fr.BILLEDCOST),
    SUM(
      CASE
        WHEN LOWER(fr.USAGEUNIT) LIKE '%month%' THEN fr.USAGEQUANTITY * (730 / 24) / 7
        ELSE fr.USAGEQUANTITY / 24 /7
      END
    ),
    SYSDATE
  FROM FOCUS_REPORTS_PY fr
  LEFT JOIN OCI_RESOURCES_PY orp ON fr.RESOURCEID = orp.IDENTIFIER
  LEFT JOIN OCI_COMPARTMENTS_PY ocp ON fr.OCI_COMPARTMENTID = ocp.COMPARTMENT_ID
  WHERE fr.CHARGEPERIODEND <= ADD_MONTHS(fr.CHARGEPERIODSTART, 7)
  GROUP BY
    TRUNC(fr.CHARGEPERIODSTART, 'IW'),     
    fr.BILLINGACCOUNTID, fr.SUBACCOUNTNAME, fr.INVOICEISSUER, fr.REGION, fr.BILLINGCURRENCY,
    fr.SERVICECATEGORY, fr.SERVICENAME, fr.CHARGEDESCRIPTION, fr.RESOURCETYPE, fr.RESOURCEID,
    orp.DISPLAY_NAME, fr.SKUID, fr.PRICINGUNIT, fr.OCI_COMPARTMENTID, fr.OCI_COMPARTMENTNAME,
    ocp.PATH, fr.USAGEUNIT;

  -- Repeat for MONTH
  INSERT INTO COST_USAGE_TIMESERIES_MONTHLY (
    DATE_BUCKET, BILLINGACCOUNTID, SUBACCOUNTNAME, INVOICEISSUER, REGION, BILLINGCURRENCY,
    SERVICECATEGORY, SERVICENAME, CHARGEDESCRIPTION, RESOURCETYPE, RESOURCEID, RESOURCENAME,
    SKUID, PRICINGUNIT, OCI_COMPARTMENTID, OCI_COMPARTMENTNAME, OCI_COMPARTMENT_PATH, USAGEUNIT,
    COST, USAGE, LAST_REFRESH
  )
  SELECT
    TRUNC(fr.CHARGEPERIODSTART, 'MM'), 
    fr.BILLINGACCOUNTID, fr.SUBACCOUNTNAME, fr.INVOICEISSUER, fr.REGION, fr.BILLINGCURRENCY,
    NVL(fr.SERVICECATEGORY, 'None'), fr.SERVICENAME, fr.CHARGEDESCRIPTION, fr.RESOURCETYPE, fr.RESOURCEID,
    orp.DISPLAY_NAME AS RESOURCENAME,
    fr.SKUID, fr.PRICINGUNIT, fr.OCI_COMPARTMENTID, fr.OCI_COMPARTMENTNAME, ocp.PATH, fr.USAGEUNIT,
    SUM(fr.BILLEDCOST),
    SUM(
      CASE
        WHEN LOWER(fr.USAGEUNIT) LIKE '%month%' THEN fr.USAGEQUANTITY
        ELSE fr.USAGEQUANTITY / 24 / (730 / 24)
      END
    ),
    SYSDATE
  FROM FOCUS_REPORTS_PY fr
  LEFT JOIN OCI_RESOURCES_PY orp ON fr.RESOURCEID = orp.IDENTIFIER
  LEFT JOIN OCI_COMPARTMENTS_PY ocp ON fr.OCI_COMPARTMENTID = ocp.COMPARTMENT_ID
  WHERE fr.CHARGEPERIODEND <= ADD_MONTHS(fr.CHARGEPERIODSTART, 7)
  GROUP BY
    TRUNC(fr.CHARGEPERIODSTART, 'MM'),     
    fr.BILLINGACCOUNTID, fr.SUBACCOUNTNAME, fr.INVOICEISSUER, fr.REGION, fr.BILLINGCURRENCY,
    fr.SERVICECATEGORY, fr.SERVICENAME, fr.CHARGEDESCRIPTION, fr.RESOURCETYPE, fr.RESOURCEID,
    orp.DISPLAY_NAME, fr.SKUID, fr.PRICINGUNIT, fr.OCI_COMPARTMENTID, fr.OCI_COMPARTMENTNAME,
    ocp.PATH, fr.USAGEUNIT;
  COMMIT;
END;
/
--------------------------------------------------------
--  DDL for Procedure REFRESH_CREDIT_USAGE_AGG_PROC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "OCI_FOCUS_REPORTS"."REFRESH_CREDIT_USAGE_AGG_PROC" AS
BEGIN
  EXECUTE IMMEDIATE 'TRUNCATE TABLE CREDIT_USAGE_AGG';

  INSERT INTO CREDIT_USAGE_AGG (BILLINGACCOUNTID, CHARGEPERIODEND, BILLEDCOST, HOURLY_COST)
  SELECT
    BILLINGACCOUNTID,
    TRUNC(CHARGEPERIODEND, 'HH') AS CHARGEPERIODEND,
    SUM(BILLEDCOST) AS BILLEDCOST,
    SUM(BILLEDCOST) / 1 AS HOURLY_COST
  FROM FOCUS_REPORTS_PY
  WHERE CHARGEPERIODEND >= SYSDATE - 30  -- or -90 for 3 months of history
  GROUP BY BILLINGACCOUNTID, TRUNC(CHARGEPERIODEND, 'HH');

  COMMIT;
END;
/

--------------------------------------------------------
--  DDL for Procedure update_oci_subscription_details proc
--------------------------------------------------------
CREATE OR REPLACE PROCEDURE update_oci_subscription_details AS
BEGIN
  MERGE INTO OCI_SUBSCRIPTION_DETAILS dst
  USING (
    SELECT
      TO_NUMBER(SUBSCRIPTION_ID) AS SUBSCRIPTION_ID,
      TIME_START,
      TIME_END,
      TO_NUMBER(ORDER_NUMBER) AS ORDER_ID,
      TO_NUMBER(ORIGINAL_QUANTITY) AS ORIGINAL_QUANTITY
    FROM CREDIT_CONSUMPTION_STATE
    WHERE SUBSCRIPTION_ID IS NOT NULL
      AND ORDER_NUMBER IS NOT NULL
  ) src
  ON (
    dst.SUBSCRIPTION_ID = src.SUBSCRIPTION_ID
    AND dst.ORDER_ID = src.ORDER_ID
    AND dst.TIME_START = src.TIME_START
    AND dst.TIME_END = src.TIME_END
    AND dst.QUANTITY = src.ORIGINAL_QUANTITY
  )
  WHEN NOT MATCHED THEN
    INSERT (
      SUBSCRIPTION_ID,
      TIME_START,
      TIME_END,
      ORDER_ID,
      QUANTITY
    )
    VALUES (
      src.SUBSCRIPTION_ID,
      src.TIME_START,
      src.TIME_END,
      src.ORDER_ID,
      src.ORIGINAL_QUANTITY
    );
    COMMIT;
END;
/

--------------------------------------------------------
--  DDL for Procedure refresh_credit_consumption_state_proc
--------------------------------------------------------

create or replace PROCEDURE                   refresh_credit_consumption_state_proc IS

  -- Record for credit_consumption_state rows
  TYPE slice_rec IS RECORD (
    rid               ROWID,
    subscription_id   credit_consumption_state.subscription_id%TYPE,
    time_start        credit_consumption_state.time_start%TYPE,
    original_quantity credit_consumption_state.original_quantity%TYPE,
    remaining_quantity credit_consumption_state.remaining_quantity%TYPE,
    depleted          credit_consumption_state.depleted%TYPE
  );
  TYPE slice_tab IS TABLE OF slice_rec INDEX BY PLS_INTEGER;

  -- Record for charges
  TYPE charge_rec IS RECORD (
    chargeperiodstart focus_reports_py.chargeperiodstart%TYPE,
    billedcost        focus_reports_py.billedcost%TYPE
  );
  TYPE charge_tab IS TABLE OF charge_rec INDEX BY PLS_INTEGER;

  slices  slice_tab;
  charges charge_tab;

  i INTEGER;
  j INTEGER;
  slice_count INTEGER;
  charge_count INTEGER;
  last_index INTEGER;
  running_total NUMBER;
  v_used NUMBER;
  v_last_date DATE;
BEGIN
  -----------------------------------------------------------------------------
  -- Phase 1: Truncate and Populate credit_consumption_state
  -----------------------------------------------------------------------------
  EXECUTE IMMEDIATE 'TRUNCATE TABLE credit_consumption_state';

  INSERT INTO credit_consumption_state (
    subscription_id,
    billingaccountid,
    order_number,
    time_start,
    time_end,
    original_quantity,
    remaining_quantity,
    depleted,
    iso_code,
    last_consumed_at,
    last_updated
  )
  SELECT
    subscription_id,
    subscription_id AS billingaccountid,
    order_number,
    TRUNC(ADD_MONTHS(
      CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE),
      (TRUNC(MONTHS_BETWEEN(SYSDATE, CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE)) / 12)) * 12
    )) AS time_start,
    LEAST(
      TRUNC(ADD_MONTHS(
        CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE),
        (TRUNC(MONTHS_BETWEEN(SYSDATE, CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE)) / 12) + 1) * 12
      )) - 1,
      CAST(TO_TIMESTAMP_TZ(time_end, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE)
    ) AS time_end,

    TO_NUMBER(
      CASE
        WHEN quantity IS NOT NULL AND TRIM(quantity) != '0' AND REGEXP_LIKE(TRIM(quantity), '^[0-9]+(\.[0-9]+)?$')
          THEN TO_NUMBER(TRIM(quantity))
        WHEN original_promo_amount IS NOT NULL AND TRIM(original_promo_amount) != '0' AND REGEXP_LIKE(TRIM(original_promo_amount), '^[0-9]+(\.[0-9]+)?$')
          THEN TO_NUMBER(TRIM(original_promo_amount))
        ELSE NULL
      END
    ) / NULLIF(GREATEST(ROUND((
      CAST(TO_TIMESTAMP_TZ(time_end, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE) -
      CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE)
    ) / 365.0), 1), 0) AS original_quantity,

    CASE
      WHEN (TO_NUMBER(available_amount) - (
        NULLIF(ROUND((
          CAST(TO_TIMESTAMP_TZ(time_end, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE) -
          CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE)
        ) / 365), 0) -
        (TRUNC(MONTHS_BETWEEN(SYSDATE, CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE)) / 12) + 1)
      ) * (
        TO_NUMBER(
          CASE
        WHEN quantity IS NOT NULL AND TRIM(quantity) != '0' AND REGEXP_LIKE(TRIM(quantity), '^[0-9]+(\.[0-9]+)?$')
          THEN TO_NUMBER(TRIM(quantity))
        WHEN original_promo_amount IS NOT NULL AND TRIM(original_promo_amount) != '0' AND REGEXP_LIKE(TRIM(original_promo_amount), '^[0-9]+(\.[0-9]+)?$')
          THEN TO_NUMBER(TRIM(original_promo_amount))
        ELSE NULL
          END
        ) / NULLIF(GREATEST(ROUND((
      CAST(TO_TIMESTAMP_TZ(time_end, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE) -
      CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE)
    ) / 365.0), 1), 0)
      )) <= 200 THEN NULL
      ELSE TO_NUMBER(available_amount) - (
        (NULLIF(GREATEST(ROUND((
      CAST(TO_TIMESTAMP_TZ(time_end, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE) -
      CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE)
    ) / 365.0), 1), 0) -
        (TRUNC(MONTHS_BETWEEN(SYSDATE, CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE)) / 12) + 1)
        ) * (
          TO_NUMBER(
            CASE
        WHEN quantity IS NOT NULL AND TRIM(quantity) != '0' AND REGEXP_LIKE(TRIM(quantity), '^[0-9]+(\.[0-9]+)?$')
          THEN TO_NUMBER(TRIM(quantity))
        WHEN original_promo_amount IS NOT NULL AND TRIM(original_promo_amount) != '0' AND REGEXP_LIKE(TRIM(original_promo_amount), '^[0-9]+(\.[0-9]+)?$')
          THEN TO_NUMBER(TRIM(original_promo_amount))
        ELSE NULL
            END
          ) / NULLIF(GREATEST(ROUND((
      CAST(TO_TIMESTAMP_TZ(time_end, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE) -
      CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE)
    ) / 365.0), 1), 0)
        )
      )
    END AS remaining_quantity,

    CASE
      WHEN (TO_NUMBER(available_amount) - (
        NULLIF(ROUND((
          CAST(TO_TIMESTAMP_TZ(time_end, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE) -
          CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE)
        ) / 365), 0) -
        (TRUNC(MONTHS_BETWEEN(SYSDATE, CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE)) / 12) + 1)
      ) * (
        TO_NUMBER(
          CASE
        WHEN quantity IS NOT NULL AND TRIM(quantity) != '0' AND REGEXP_LIKE(TRIM(quantity), '^[0-9]+(\.[0-9]+)?$')
          THEN TO_NUMBER(TRIM(quantity))
        WHEN original_promo_amount IS NOT NULL AND TRIM(original_promo_amount) != '0' AND REGEXP_LIKE(TRIM(original_promo_amount), '^[0-9]+(\.[0-9]+)?$')
          THEN TO_NUMBER(TRIM(original_promo_amount))
        ELSE NULL
          END
        ) / NULLIF(GREATEST(ROUND((
      CAST(TO_TIMESTAMP_TZ(time_end, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE) -
      CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE)
    ) / 365.0), 1), 0)
      )) <= 200 THEN 1
      ELSE 0
    END AS depleted,

    iso_code,
    NULL AS last_consumed_at,
    SYSDATE

  FROM oci_subscriptions_py
  WHERE available_amount IS NOT NULL
    AND ((quantity IS NOT NULL AND REGEXP_LIKE(quantity, '^[0-9]+(\\.[0-9]+)?$') AND TO_NUMBER(quantity) > 0)
         OR (original_promo_amount IS NOT NULL AND REGEXP_LIKE(original_promo_amount, '^[0-9]+(\\.[0-9]+)?$') AND TO_NUMBER(original_promo_amount) > 0))
    AND time_start IS NOT NULL
    AND time_end IS NOT NULL
    AND substatus = 'ACTIVE'
    AND SYSDATE BETWEEN
      CAST(TO_TIMESTAMP_TZ(time_start, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE) AND
      CAST(TO_TIMESTAMP_TZ(time_end, 'YYYY-MM-DD"T"HH24:MI:SSTZH:TZM') AS DATE);

-----------------------------------------------------------------------------
-- Phase 2: Update LAST_CONSUMED_AT by back-calculating from current active order
-----------------------------------------------------------------------------

    FOR sub IN (SELECT DISTINCT subscription_id FROM credit_consumption_state) LOOP

    v_used := NULL;
    slices.DELETE;
    charges.DELETE;

    -- Step 1: Get consumed amount from latest non-depleted order
    BEGIN
        SELECT original_quantity - NVL(remaining_quantity, 0)
        INTO v_used
        FROM (
        SELECT original_quantity, remaining_quantity
        FROM credit_consumption_state
        WHERE subscription_id = sub.subscription_id AND depleted = 0
        ORDER BY time_start DESC
        )
        WHERE ROWNUM = 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        CONTINUE;
    END;

    -- Step 2: Get ALL depleted = 1 rows ordered by time_start DESC
    SELECT rowid, subscription_id, time_start, original_quantity, NVL(remaining_quantity, 0), depleted
    BULK COLLECT INTO slices
    FROM credit_consumption_state
    WHERE subscription_id = sub.subscription_id AND depleted = 1
    ORDER BY time_start DESC;

    slice_count := slices.COUNT;

    -- Skip if no depleted slices
    IF slice_count = 0 THEN
        CONTINUE;
    END IF;

    -- Step 3: Get charges, newest to oldest
    SELECT chargeperiodstart, billedcost
    BULK COLLECT INTO charges
    FROM focus_reports_py
    WHERE billingaccountid = sub.subscription_id AND billedcost > 0
    ORDER BY chargeperiodstart DESC;

    charge_count := charges.COUNT;
    last_index := 1;

    -- Step 4: FIRST depleted slice gets updated using v_used from current order
    running_total := 0;

    FOR j IN last_index .. charge_count LOOP
        running_total := running_total + charges(j).billedcost;

        IF running_total >= v_used THEN
        UPDATE credit_consumption_state
        SET last_consumed_at = charges(j).chargeperiodstart
        WHERE ROWID = slices(1).rid;

        v_last_date := charges(j).chargeperiodstart;
        last_index := j + 1;
        EXIT;
        END IF;
    END LOOP;

    -- Step 5: Remaining depleted slices get full original_quantity matched
    FOR i IN 2 .. slice_count LOOP
        running_total := 0;

        FOR j IN last_index .. charge_count LOOP
        -- Only use charges before the last known consumed date
        IF charges(j).chargeperiodstart < v_last_date THEN
            running_total := running_total + charges(j).billedcost;

            IF running_total >= slices(i - 1).original_quantity THEN
            UPDATE credit_consumption_state
            SET last_consumed_at = charges(j).chargeperiodstart
            WHERE ROWID = slices(i).rid;

            v_last_date := charges(j).chargeperiodstart;
            last_index := j + 1;
            EXIT;
            END IF;
        END IF;
        END LOOP;
    END LOOP;

    END LOOP;

  COMMIT;
END;
/

-- AI CONFIG

-- Create OCI AI Settings. Tables, Procedures etc
CREATE TABLE AI_PROMPT_COMPONENTS (
    id              NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    component_type  VARCHAR2(50), -- e.g., 'INSTRUCTION', 'SCHEMA', 'TABLE_DESCRIPTIONS'
    content         CLOB,
    updated_at      TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE AI_PROMPT_EXAMPLES (
    id              NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    example_order   NUMBER, -- used for ordering
    user_question   VARCHAR2(1000),
    oracle_sql      CLOB,
    updated_at      TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE ai_model_config (
    model_id          VARCHAR2(1000),
    model_name        VARCHAR2(1000), -- e.g., 'Cohere', 'Llama'
    api_format        VARCHAR2(50),  -- 'COHERE' or 'GENERIC'
    is_default        VARCHAR2(1),   -- 'Y' for default
    region            VARCHAR2(50),
    temperature       NUMBER,
    top_p             NUMBER,
    top_k             NUMBER,
    frequency_penalty NUMBER,
    presence_penalty  NUMBER
);

--------------------------------------------------------
--  DDL for Procedure OV_AI_AGENT_PROC
--------------------------------------------------------

  CREATE OR REPLACE PROCEDURE OV_AI_CHATBOT_PROC (
    p_user_message    IN VARCHAR2,
    p_model_id        IN VARCHAR2,
    p_chat_id         IN NUMBER,
    p_app_user        IN VARCHAR2,
    p_app_session     IN VARCHAR2,
    p_compartment_id  IN VARCHAR2,
    p_row_id          OUT ai_chat_log.id%TYPE,
    p_final_sql       OUT CLOB,
    p_final_response  OUT CLOB,
    p_final_aimessage OUT CLOB
) AS
    v_attempt            NUMBER := 0;
    v_max_attempts       CONSTANT NUMBER := 5;
    v_last_failed        VARCHAR2(1) := 'Y';
    v_reasoned_message   CLOB;
    v_reasoning_row_id   NUMBER;
    v_response_sql       CLOB;
    v_response           CLOB;
    v_aimessage          CLOB;
    v_log_row_id         ai_chat_log.id%TYPE;
    l_input_text         VARCHAR2(4000);
    l_prompt             CLOB;
    l_payload            CLOB;
    l_reasoning_response CLOB;
    l_response_struct    dbms_cloud_types.resp;
    l_resp_obj           json_object_t;
    l_result_text        VARCHAR2(4000);
    v_summary_text       CLOB;
    v_summary_prompt     VARCHAR2(4000);
    l_sql_body           VARCHAR2(32767);
    l_sql                VARCHAR2(32767);
    l_cursor             INTEGER;
    l_desc_tab           dbms_sql.desc_tab;
    l_col_count          INTEGER;
    l_value              VARCHAR2(4000);
    l_has_data           BOOLEAN := FALSE;
    l_status             INTEGER;
    l_reasoning_endpoint VARCHAR2(1000);
    l_instruction        CLOB;
    l_schema_info        CLOB;
    l_table_desc         CLOB;
    l_examples           CLOB;

    -- New config variables
    l_region             VARCHAR2(50);
    l_model_id           VARCHAR2(1000);
    l_api_format         VARCHAR2(50);
    l_temperature        NUMBER;
    l_top_p              NUMBER;
    l_top_k              NUMBER;
    l_frequency_penalty  NUMBER;
    l_presence_penalty   NUMBER;

BEGIN
    apex_debug.message('✨ Starting OV_AI_CHATBOT_PROC_LLAMA');

    BEGIN
        SELECT
            region,
            model_id,
            api_format,
            NVL(temperature, 1),
            NVL(top_p, 1),
            NVL(top_k, 1),
            NVL(frequency_penalty, 0),
            NVL(presence_penalty, 0)
        INTO
            l_region,
            l_model_id,
            l_api_format,
            l_temperature,
            l_top_p,
            l_top_k,
            l_frequency_penalty,
            l_presence_penalty
        FROM
            ai_model_config
        WHERE model_id = p_model_id;

        l_reasoning_endpoint := 'https://inference.generativeai.'
                                || LOWER(l_region)
                                || '.oci.oraclecloud.com/20231130/actions/chat';

        apex_debug.message('📄 GenAI endpoint: %s', l_reasoning_endpoint);
        apex_debug.message('📦 Model: %s, Format: %s', l_model_id, l_api_format);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            raise_application_error(-20002, 'No AI model config found for given agent ID.');
    END;
    BEGIN
        SELECT
            content
        INTO l_instruction
        FROM
            ai_prompt_components
        WHERE
            component_type = 'INSTRUCTION';

        SELECT
            content
        INTO l_schema_info
        FROM
            ai_prompt_components
        WHERE
            component_type = 'SCHEMA';

        SELECT
            content
        INTO l_table_desc
        FROM
            ai_prompt_components
        WHERE
            component_type = 'TABLE_DESCRIPTIONS';

        FOR r IN (
            SELECT
                user_question,
                oracle_sql
            FROM
                ai_prompt_examples
            ORDER BY
                example_order
        ) LOOP
            l_examples := l_examples
                          || 'Q: '
                          || r.user_question
                          || chr(10)
                          || 'A: '
                          || r.oracle_sql
                          || chr(10)
                          || chr(10);
        END LOOP;

    EXCEPTION
        WHEN OTHERS THEN
            apex_debug.message('⚠️ Failed loading prompt components: %s', sqlerrm);
            raise_application_error(-20001, 'Failed to load AI prompt components');
    END;

    LOOP
        v_attempt := v_attempt + 1;
        apex_debug.message('⏳ Attempt #%s', v_attempt);
        DECLARE
            l_input VARCHAR2(32767) :=
                CASE
                    WHEN v_attempt = 1 OR v_reasoned_message IS NULL THEN
                        p_user_message
                    ELSE v_reasoned_message
                END;
        BEGIN
            apex_debug.message('🔍 Input message: %s', l_input);
            l_prompt := l_instruction || chr(10) || '-- SCHEMA --' || chr(10) || l_schema_info || chr(10) || '-- TABLES --' || chr(10) || l_table_desc || chr(10) || '-- EXAMPLES --' || chr(10) || l_examples || '-- QUESTION --' || chr(10) || 'Q: ' || l_input || chr(10) || 'A:';
            IF l_api_format = 'COHERE' THEN
                l_payload := '{"compartmentId": "' || p_compartment_id || '", 
                    "servingMode": {
                        "modelId": "' || l_model_id || '", 
                        "servingType": "ON_DEMAND"}, 
                    "chatRequest": {
                        "apiFormat": "COHERE",
                        "maxTokens": 2048,
                        "frequencyPenalty": ' || TO_CHAR(l_frequency_penalty, 'FM9990.00') || ',
                        "presencePenalty": ' || TO_CHAR(l_presence_penalty, 'FM9990.00') || ',
                        "temperature": ' || TO_CHAR(l_temperature, 'FM9990.00') || ',
                        "topP": ' || TO_CHAR(l_top_p, 'FM9990.00') || ',
                        "topK": ' || TO_CHAR(l_top_k, 'FM9990') || ',
                        "message": "' || replace(replace(l_prompt, '"', '\"'), chr(10), '\n') || '" 
                    }
                }';
            ELSIF l_api_format = 'GENERIC' THEN
                l_payload := '{
                    "compartmentId": "' || p_compartment_id || '",
                    "servingMode": {
                        "modelId": "' || l_model_id || '",
                        "servingType": "ON_DEMAND"
                    },
                    "chatRequest": {
                        "messages": [{
                            "role": "USER",
                            "content": [{
                                "type": "TEXT",
                                "text": "' || REPLACE(REPLACE(l_prompt, '"', '\"'), CHR(10), '\n') || '"
                            }]
                        }],
                        "apiFormat": "GENERIC",
                        "maxTokens": 2048,
                        "temperature": ' || TO_CHAR(l_temperature) || ',
                        "topP": ' || TO_CHAR(l_top_p, 'FM9990.00') || ',
                        "topK": ' || TO_CHAR(l_top_k, 'FM9990') || ',
                        "frequencyPenalty": ' || TO_CHAR(l_frequency_penalty, 'FM9990.00') || ',
                        "presencePenalty": ' || TO_CHAR(l_presence_penalty, 'FM9990.00') || '
                    }
                }';
            ELSE
                raise_application_error(-20003, 'Unsupported API format: ' || l_api_format);
            END IF;

            FOR i IN 0..CEIL(DBMS_LOB.GETLENGTH(l_payload)/4000) - 1 LOOP
                apex_debug.message('📤 Payload part %s: %s', i+1, DBMS_LOB.SUBSTR(l_payload, 4000, i * 4000 + 1));
            END LOOP;
            l_response_struct := dbms_cloud.send_request(credential_name => 'OCI$RESOURCE_PRINCIPAL', uri => l_reasoning_endpoint, method => 'POST', headers => JSON_OBJECT('Content-Type' VALUE 'application/json'), body => utl_raw.cast_to_raw(l_payload));

            v_response := dbms_cloud.get_response_text(l_response_struct);
            apex_debug.message('🤖 GenAI raw SQL response: %s', substr(v_response, 1, 4000));
            l_resp_obj := json_object_t.parse(v_response);
            IF l_resp_obj.has('chatResponse') THEN
                DECLARE
                    l_chat_response JSON_OBJECT_T := l_resp_obj.get_object('chatResponse');
                    l_text_raw      CLOB;
                    l_sql_block     CLOB;
                    l_start_pos     PLS_INTEGER;
                    l_end_pos       PLS_INTEGER;
                BEGIN
                    -- Try direct path: chatResponse.text
                    IF l_chat_response.has('text') THEN
                        BEGIN
                            l_text_raw := l_chat_response.get_string('text');
                        EXCEPTION
                            WHEN OTHERS THEN
                                l_text_raw := NULL; -- Graceful fallback if unexpected type
                        END;
                    END IF;

                    -- If empty, try fallback path: chatResponse.choices[0].message.content[0].text
                    IF l_text_raw IS NULL OR TRIM(l_text_raw) IS NULL THEN
                        BEGIN
                            DECLARE
                                l_choices_arr  JSON_ARRAY_T;
                                l_first_choice JSON_OBJECT_T;
                                l_message_obj  JSON_OBJECT_T;
                                l_content_arr  JSON_ARRAY_T;
                                l_text_obj     JSON_OBJECT_T;
                            BEGIN
                                l_choices_arr := l_chat_response.get_array('choices');
                                l_first_choice := TREAT(l_choices_arr.get(0) AS JSON_OBJECT_T);
                                l_message_obj := TREAT(l_first_choice.get('message') AS JSON_OBJECT_T);
                                l_content_arr := TREAT(l_message_obj.get('content') AS JSON_ARRAY_T);
                                l_text_obj := TREAT(l_content_arr.get(0) AS JSON_OBJECT_T);
                                l_text_raw := l_text_obj.get_string('text');
                            EXCEPTION
                                WHEN OTHERS THEN
                                    apex_debug.message('❌ Could not extract fallback chatResponse.choices path: %s', SQLERRM);
                                    v_last_failed := 'Y';
                                    CONTINUE;
                            END;
                        END;
                    END IF;

                    -- Now extract SQL from l_text_raw
                    l_start_pos := instr(l_text_raw, '```sql');
                    IF l_start_pos > 0 THEN
                        l_text_raw := substr(l_text_raw, l_start_pos + 6); -- Skip past ```sql
                    END IF;

                    l_end_pos := instr(l_text_raw, '```');
                    IF l_end_pos > 0 THEN
                        l_sql_block := substr(l_text_raw, 1, l_end_pos - 1);
                    ELSE
                        l_sql_block := l_text_raw;
                    END IF;

                    -- Cleanup
                    v_response_sql := regexp_replace(trim(l_sql_block), ';[[:space:]]*$', '');
                    apex_debug.message('✅ Extracted SQL: %s', substr(v_response_sql, 1, 1000));
                END;
            ELSE
                apex_debug.message('❌ chatResponse not found');
                v_last_failed := 'Y';
                CONTINUE;
            END IF;

            -- Validate SQL against DB
            l_sql_body := rtrim(v_response_sql, ';');
            l_sql := 'SELECT * FROM ('
                     || l_sql_body
                     || ') WHERE ROWNUM = 1';
            l_cursor := dbms_sql.open_cursor;
            dbms_sql.parse(l_cursor, l_sql, dbms_sql.native);
            dbms_sql.describe_columns(l_cursor, l_col_count, l_desc_tab);
            FOR i IN 1..l_col_count LOOP
                dbms_sql.define_column(l_cursor, i, l_value, 4000);
            END LOOP;

            l_status := dbms_sql.execute(l_cursor);
            IF dbms_sql.fetch_rows(l_cursor) > 0 THEN
                FOR i IN 1..l_col_count LOOP
                    dbms_sql.column_value(l_cursor, i, l_value);
                    IF l_value IS NOT NULL THEN
                        l_has_data := TRUE;
                        EXIT;
                    END IF;
                END LOOP;
            END IF;

            dbms_sql.close_cursor(l_cursor);
            IF l_has_data THEN
                apex_debug.message('🟢 SQL validation passed. Logging and summarizing.');
                v_last_failed := 'N';

                -- 🔁 Extract JSON from the SQL results
                DECLARE
                    l_json_result CLOB := '[';
                    l_cnt         INTEGER := 0;
                BEGIN
                    l_cursor := dbms_sql.open_cursor;
                    dbms_sql.parse(l_cursor, 'SELECT * FROM ('
                                             || v_response_sql
                                             || ') WHERE ROWNUM <= 50', dbms_sql.native);

                    dbms_sql.describe_columns(l_cursor, l_col_count, l_desc_tab);
                    FOR i IN 1..l_col_count LOOP
                        dbms_sql.define_column(l_cursor, i, l_value, 4000);
                    END LOOP;

                    l_status := dbms_sql.execute(l_cursor);
                    WHILE dbms_sql.fetch_rows(l_cursor) > 0 LOOP
                        l_cnt := l_cnt + 1;
                        l_json_result := l_json_result
                                         ||
                            CASE
                                WHEN l_cnt > 1 THEN
                                    ','
                                ELSE ''
                            END
                                         || '{';

                        FOR i IN 1..l_col_count LOOP
                            dbms_sql.column_value(l_cursor, i, l_value);
                            l_json_result := l_json_result
                                             || '"'
                                             || replace(l_desc_tab(i).col_name, '"', '')
                                             || '":"'
                                             || replace(l_value, '"', '\"')
                                             || '"'
                                             || CASE
                                WHEN i < l_col_count THEN
                                    ','
                                ELSE ''
                            END;

                        END LOOP;

                        l_json_result := l_json_result || '}';
                        EXIT WHEN l_cnt >= 50;
                    END LOOP;

                    l_json_result := l_json_result || ']';
                    p_final_aimessage := l_json_result;
                    apex_debug.message('📦 AIMESSAGE: %s', substr(l_json_result, 1, 1000));
                    dbms_sql.close_cursor(l_cursor);
                EXCEPTION
                    WHEN OTHERS THEN
                        IF dbms_sql.is_open(l_cursor) THEN
                            dbms_sql.close_cursor(l_cursor);
                        END IF;
                        apex_debug.message('⚠️ Failed to build AIMESSAGE JSON: %s', sqlerrm);
                        p_final_aimessage := '[]';
                END;

                -- 🔐 Log and summarize
                INSERT INTO ai_chat_log (
                    chat_id,
                    app_user,
                    session_id,
                    user_message,
                    generated_sql,
                    execution_data,
                    raw_response
                ) VALUES (
                    p_chat_id,
                    p_app_user,
                    p_app_session,
                    l_input,
                    v_response_sql,
                    p_final_aimessage,
                    v_response
                ) RETURNING id INTO v_log_row_id;

                UPDATE ai_chat_log_reasoning
                SET
                    log_id = v_log_row_id
                WHERE
                        chat_id = p_chat_id
                    AND log_id IS NULL;

                p_row_id := v_log_row_id;
                p_final_sql := v_response_sql;
                p_final_response := v_response;
                -- 🧠 Run summarization
                BEGIN
                    v_summary_prompt := 'You are a helpful financial data analyst. Format summaries clearly using these sections:\n- Overview\n- Details\n- Totals\n- Observations\nUse plain text, line breaks, and bullet points. Here is the data to analyze:';
                    l_input_text := v_summary_prompt
                                    || chr(10)
                                    || chr(10)
                                    || p_final_aimessage;

                    IF l_api_format = 'COHERE' THEN
                        l_payload := '{
                            "compartmentId": "' || p_compartment_id || '",
                            "servingMode": {
                                "modelId": "' || l_model_id || '", 
                                "servingType": "ON_DEMAND"}, 
                            "chatRequest": {
                                "apiFormat": "COHERE",
                                "maxTokens": 2048,
                                "frequencyPenalty": ' || TO_CHAR(l_frequency_penalty, 'FM9990.00') || ',
                                "presencePenalty": ' || TO_CHAR(l_presence_penalty, 'FM9990.00') || ',
                                "temperature": ' || TO_CHAR(l_temperature, 'FM9990.00') || ',
                                "topP": ' || TO_CHAR(l_top_p, 'FM9990.00') || ',
                                "topK": ' || TO_CHAR(l_top_k, 'FM9990') || ',
                                "message": "' || replace(replace(l_input_text, '"', '\"'), chr(10), '\n') || '" 
                            }
                        }';
                    ELSIF l_api_format = 'GENERIC' THEN
                        l_payload := '{
                            "compartmentId": "' || p_compartment_id || '",
                            "servingMode": {
                                "modelId": "' || l_model_id || '",
                                "servingType": "ON_DEMAND"
                            },
                            "chatRequest": {
                                "messages": [{
                                    "role": "USER",
                                    "content": [{
                                        "type": "TEXT",
                                        "text": "' || REPLACE(REPLACE(l_input_text, '"', '\"'), CHR(10), '\n') || '"
                                    }]
                                }],
                                "apiFormat": "GENERIC",
                                "maxTokens": 2048,
                                "isStream": false,
                                "numGenerations": 1,
                                "temperature": ' || TO_CHAR(l_temperature) || ',
                                "topP": ' || TO_CHAR(l_top_p, 'FM9990.00') || ',
                                "topK": ' || TO_CHAR(l_top_k, 'FM9990') || ',
                                "frequencyPenalty": ' || TO_CHAR(l_frequency_penalty, 'FM9990.00') || ',
                                "presencePenalty": ' || TO_CHAR(l_presence_penalty, 'FM9990.00') || '
                            }
                        }';
                    ELSE
                        raise_application_error(-20004, 'Unsupported API format in summary: ' || l_api_format);
                    END IF;

                    l_response_struct := dbms_cloud.send_request(credential_name => 'OCI$RESOURCE_PRINCIPAL', uri => l_reasoning_endpoint, method => 'POST', headers => JSON_OBJECT('Content-Type' VALUE 'application/json'), body => utl_raw.cast_to_raw(l_payload));
                    l_reasoning_response := dbms_cloud.get_response_text(l_response_struct);
                    l_resp_obj := json_object_t.parse(l_reasoning_response);
                    IF l_resp_obj.has('chatResponse') THEN
                        DECLARE
                            l_chat_response JSON_OBJECT_T := l_resp_obj.get_object('chatResponse');
                            l_choices_arr   JSON_ARRAY_T;
                            l_first_choice  JSON_OBJECT_T;
                            l_message_obj   JSON_OBJECT_T;
                            l_content_arr   JSON_ARRAY_T;
                            l_text_obj      JSON_OBJECT_T;
                        BEGIN
                            -- Default: NULL
                            v_summary_text := NULL;

                            -- Try direct path
                            IF l_chat_response.has('text') THEN
                                BEGIN
                                    v_summary_text := l_chat_response.get_string('text');
                                EXCEPTION
                                    WHEN OTHERS THEN
                                        v_summary_text := NULL;
                                END;
                            END IF;

                            -- Fallback if text is NULL or empty
                            IF v_summary_text IS NULL OR TRIM(v_summary_text) IS NULL THEN
                                BEGIN
                                    l_choices_arr := l_chat_response.get_array('choices');
                                    l_first_choice := TREAT(l_choices_arr.get(0) AS JSON_OBJECT_T);
                                    l_message_obj := TREAT(l_first_choice.get('message') AS JSON_OBJECT_T);
                                    l_content_arr := TREAT(l_message_obj.get('content') AS JSON_ARRAY_T);
                                    l_text_obj := TREAT(l_content_arr.get(0) AS JSON_OBJECT_T);
                                    v_summary_text := l_text_obj.get_string('text');
                                EXCEPTION
                                    WHEN OTHERS THEN
                                        apex_debug.message('❌ Failed to extract summary_text from fallback: %s', SQLERRM);
                                        v_summary_text := NULL;
                                END;
                            END IF;

                            -- ✅ Debug output of the extracted summary text
                            apex_debug.message('📋 Extracted summary_text: %s', SUBSTR(v_summary_text, 1, 4000));

                            -- Save result if something was found
                            IF v_summary_text IS NOT NULL THEN
                                UPDATE ai_chat_log
                                SET
                                    summary_text = v_summary_text,
                                    reasoned_message = v_reasoned_message
                                WHERE
                                    id = v_log_row_id;

                                apex_debug.message('📊 Summary stored.');
                            ELSE
                                apex_debug.message('⚠️ No summary text found to store.');
                            END IF;
                        END;
                    END IF;

                EXCEPTION
                    WHEN OTHERS THEN
                        apex_debug.message('❗ Summary generation failed: %s', sqlerrm);
                END;

                EXIT;
            ELSE
                apex_debug.message('⚠️ SQL produced no results.');
                v_last_failed := 'Y';
            END IF;

        EXCEPTION
            WHEN OTHERS THEN
                apex_debug.message('🔥 Exception in GenAI SQL section: %s', sqlerrm);
        END;

        IF
            v_last_failed = 'Y'
            AND v_attempt < v_max_attempts
        THEN
            apex_debug.message('♻️ Triggering GenAI rephrasing');
            l_input_text := nvl(v_reasoned_message, p_user_message);
            l_prompt := 'Rephrase the following business question by replacing informal IT terms with their corresponding enterprise equivalents used in the database. Preserve the original structure, intent, and meaning. Respond only with the rephrased question.';
            IF l_api_format = 'COHERE' THEN
                l_payload := '{
                    "compartmentId": "' || p_compartment_id || '",
                    "servingMode": {
                        "modelId": "' || l_model_id || '",
                        "servingType": "ON_DEMAND"
                    },
                    "chatRequest": {
                        "apiFormat": "COHERE",
                        "maxTokens": 2048,
                        "frequencyPenalty": ' || TO_CHAR(l_frequency_penalty, 'FM9990.00') || ',
                        "presencePenalty": ' || TO_CHAR(l_presence_penalty, 'FM9990.00') || ',
                        "temperature": ' || TO_CHAR(l_temperature, 'FM9990.00') || ',
                        "topP": ' || TO_CHAR(l_top_p, 'FM9990.00') || ',
                        "topK": ' || TO_CHAR(l_top_k, 'FM9990') || ',
                        "message": "' || REPLACE(REPLACE(l_prompt || CHR(10) || l_input_text, '"', '\"'), CHR(10), '\n') || '"
                    }
                }';
            ELSIF l_api_format = 'GENERIC' THEN
                l_payload := '{
                    "compartmentId": "' || p_compartment_id || '",
                    "servingMode": {
                        "modelId": "' || l_model_id || '",
                        "servingType": "ON_DEMAND"
                    },
                    "chatRequest": {
                        "messages": [{
                            "role": "USER",
                            "content": [{
                                "type": "TEXT",
                                "text": "' || REPLACE(REPLACE(l_prompt || CHR(10) || l_input_text, '"', '\"'), CHR(10), '\n') || '"
                            }]
                        }],
                        "apiFormat": "GENERIC",
                        "maxTokens": 2048,
                        "isStream": false,
                        "numGenerations": 1,
                        "temperature": ' || TO_CHAR(l_temperature) || ',
                        "topP": ' || TO_CHAR(l_top_p, 'FM9990.00') || ',
                        "topK": ' || TO_CHAR(l_top_k, 'FM9990') || ',
                        "frequencyPenalty": ' || TO_CHAR(l_frequency_penalty, 'FM9990.00') || ',
                        "presencePenalty": ' || TO_CHAR(l_presence_penalty, 'FM9990.00') || '
                    }
                }';
            ELSE
                raise_application_error(-20005, 'Unsupported API format in rephrasing: ' || l_api_format);
            END IF;
            l_response_struct := dbms_cloud.send_request(credential_name => 'OCI$RESOURCE_PRINCIPAL', uri => l_reasoning_endpoint, method => 'POST', headers => JSON_OBJECT('Content-Type' VALUE 'application/json'), body => utl_raw.cast_to_raw(l_payload));
            l_reasoning_response := dbms_cloud.get_response_text(l_response_struct);
            l_resp_obj := json_object_t.parse(l_reasoning_response);
            IF l_resp_obj.has('chatResponse') THEN
                DECLARE
                    l_chat_response   JSON_OBJECT_T := l_resp_obj.get_object('chatResponse');
                    l_choices_arr     JSON_ARRAY_T;
                    l_first_choice    JSON_OBJECT_T;
                    l_message_obj     JSON_OBJECT_T;
                    l_content_arr     JSON_ARRAY_T;
                    l_text_obj        JSON_OBJECT_T;
                    l_result_text     CLOB;
                BEGIN
                    -- Try direct chatResponse.text
                    IF l_chat_response.has('text') THEN
                        BEGIN
                            l_result_text := l_chat_response.get_string('text');
                        EXCEPTION
                            WHEN OTHERS THEN
                                l_result_text := NULL;
                        END;
                    END IF;

                    -- Fallback to choices[0].message.content[0].text
                    IF l_result_text IS NULL OR TRIM(l_result_text) IS NULL THEN
                        BEGIN
                            l_choices_arr := l_chat_response.get_array('choices');
                            l_first_choice := TREAT(l_choices_arr.get(0) AS JSON_OBJECT_T);
                            l_message_obj := TREAT(l_first_choice.get('message') AS JSON_OBJECT_T);
                            l_content_arr := TREAT(l_message_obj.get('content') AS JSON_ARRAY_T);
                            l_text_obj := TREAT(l_content_arr.get(0) AS JSON_OBJECT_T);
                            l_result_text := l_text_obj.get_string('text');
                        EXCEPTION
                            WHEN OTHERS THEN
                                apex_debug.message('❌ Failed to extract rephrased text from fallback: %s', SQLERRM);
                                l_result_text := NULL;
                        END;
                    END IF;

                    -- Store result
                    v_reasoned_message := l_result_text;

                    INSERT INTO ai_chat_log_reasoning (
                        chat_id,
                        log_id,
                        input_message,
                        rephrased_output,
                        attempt_number,
                        app_user,
                        created_at
                    ) VALUES (
                        p_chat_id,
                        NULL,
                        l_input_text,
                        l_result_text,
                        v_attempt,
                        p_app_user,
                        SYSTIMESTAMP
                    ) RETURNING id INTO v_reasoning_row_id;

                    apex_debug.message('📝 Rephrased: %s', l_result_text);
                END;
            ELSE
                apex_debug.message('❌ Rephrasing failed: chatResponse not found');
            END IF;

        ELSE
            EXIT WHEN v_attempt >= v_max_attempts;
        END IF;

    END LOOP;

    IF v_last_failed = 'Y' THEN
        apex_debug.message('🛑 Final failure after %s attempts', v_attempt);
        raise_application_error(-20010, 'All AI attempts failed to generate a working SQL query.');
    END IF;

    apex_debug.message('✅ Procedure completed');
END;
/

--------------------------------------------------------
--  INSERTS
--------------------------------------------------------

INSERT INTO APP_CONFIG (CONFIG_KEY, CONFIG_VALUE)
VALUES ('P2_COMPARTMENT_ID', '&COMPARTMENT_OCID');

INSERT INTO AI_PROMPT_COMPONENTS (component_type, content)
VALUES (
  'INSTRUCTION',
  'You are an expert in translating natural language questions about Oracle Cloud Infrastructure (OCI) cost, usage, and availability into accurate Oracle SQL queries using the following tables: COST_USAGE_TIMESERIES_DAILY (alias: c) and OCI_AVAILABILITY_METRICS_PY (alias: a). When generating SQL: always use case-insensitive string matching using UPPER(column) LIKE UPPER(''%value%''), never use equals (=). Apply this matching rule only to these columns: from c: SERVICECATEGORY, SERVICENAME, RESOURCETYPE, RESOURCENAME, CHARGEDESCRIPTION, OCI_COMPARTMENTNAME, OCI_COMPARTMENT_PATH, USAGEUNIT; from a: RESOURCEDISPLAYNAME, NAMESPACE, METRIC_NAME. Generate an Oracle SQL query to retrieve the monthly cost for resources related to a free text word or sentence like ''AI'' over the last two months. Search for the keyword or sentence like ''AI'' in the columns SERVICECATEGORY, SERVICENAME, RESOURCETYPE, RESOURCENAME, CHARGEDESCRIPTION, OCI_COMPARTMENTNAME, OCI_COMPARTMENT_PATH, and USAGEUNIT in that priority order. Return results only for the first matched column. Use case-insensitive matching and aggregate the requested value. When filtering dates, use c.DATE_BUCKET BETWEEN TRUNC(ADD_MONTHS(SYSDATE, -2), ''MM'') AND TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE, -1))) to include the last two months and exclude the current month. Use the same logic for any requested months. Format the output as YYYY-MM using TO_CHAR(c.DATE_BUCKET, ''YYYY-MM''). Apply this logic consistently in all queries. When user''s prompt includes non-IT terminology and looks more like a name (as an example Oracle), search also against OCI_WORKLOADS (WORKLOAD_NAME) and join with COST_USAGE_TIMESERIES_DAILY on compartment_id and value.'
);

INSERT INTO AI_PROMPT_COMPONENTS (component_type, content)
VALUES (
  'SCHEMA',
  'CREATE TABLE "USAGE"."OCI_AVAILABILITY_METRICS_PY" ( "RESOURCEDISPLAYNAME" VARCHAR2(64 BYTE), "TIMESTAMP" TIMESTAMP (6), "NAMESPACE" VARCHAR2(64 BYTE), "COMPARTMENT_ID" VARCHAR2(256 BYTE), "VALUE" NUMBER, "METRIC_NAME" VARCHAR2(128 BYTE)); CREATE TABLE COST_USAGE_TIMESERIES_DAILY ( DATE_BUCKET DATE, BILLINGACCOUNTID VARCHAR2(200 BYTE), SUBACCOUNTNAME VARCHAR2(200 BYTE), INVOICEISSUER VARCHAR2(200 BYTE), REGION VARCHAR2(100 BYTE), BILLINGCURRENCY VARCHAR2(20 BYTE), SERVICECATEGORY VARCHAR2(200 BYTE), SERVICENAME VARCHAR2(200 BYTE), CHARGEDESCRIPTION VARCHAR2(400 BYTE), RESOURCETYPE VARCHAR2(200 BYTE), RESOURCEID VARCHAR2(400 BYTE), SKUID VARCHAR2(200 BYTE), PRICINGUNIT VARCHAR2(100 BYTE), OCI_COMPARTMENTID VARCHAR2(400 BYTE), OCI_COMPARTMENTNAME VARCHAR2(400 BYTE), USAGEUNIT VARCHAR2(100 BYTE), COST NUMBER(20, 6), USAGE NUMBER(20, 6), RESOURCENAME VARCHAR2(1000 BYTE), OCI_COMPARTMENT_PATH VARCHAR2(4000 BYTE));'
);

INSERT INTO AI_PROMPT_COMPONENTS (component_type, content)
VALUES (
  'TABLE_DESCRIPTIONS',
  'Table COST_USAGE_TIMESERIES_DAILY contains OCI cost and usage data, including: - DATE_BUCKET: Aggregated date based on daily granularity (e.g., 01-MAY-2025) - BILLINGACCOUNTID: OCI billing account ID - SUBACCOUNTNAME: Subaccount under the billing account - INVOICEISSUER: Entity issuing the invoice (e.g., Oracle America) - REGION: OCI region where the usage occurred - BILLINGCURRENCY: Currency used for billing (e.g., USD, EUR) - SERVICECATEGORY: Broad OCI service category (e.g., Compute, Storage, Database). Always use Camel Case - SERVICENAME: Specific service name (e.g., BLOCK_STORAGE, COMPUTE, LOGGING, DATABASE). Always use capitals - CHARGEDESCRIPTION: Description of the charge (e.g., Logging - Storage, Database Exadata - OCPU - BYOL) - RESOURCETYPE: Type of resource (e.g., instance, bootvolume, vmcluster, vnic, log). Always use lower case - RESOURCEID: Unique identifier for the OCI resource - SKUID: Identifier of the pricing unit - PRICINGUNIT: Pricing unit (e.g., PER_HOUR, PER_GB) - OCI_COMPARTMENTID: Identifier of the compartment - OCI_COMPARTMENTNAME: Name of the compartment - USAGEUNIT: Unit of resource usage (e.g., OCPU, GB, HOUR) - COST: Cost incurred for the usage (numeric) - USAGE: Quantity of usage (numeric) - RESOURCENAME: Display name of the resource, if available - OCI_COMPARTMENT_PATH: Full hierarchy path of the compartment. Table OCI_AVAILABILITY_METRICS_PY contains availability metrics for various OCI resources: - RESOURCEDISPLAYNAME: Human-readable name of the OCI resource - TIMESTAMP: Time when the metric was recorded - NAMESPACE: Metric category (e.g., oci_computeagent, oci_logging) - COMPARTMENT_ID: Compartment where the resource is located - VALUE: Reported value of the availability metric - METRIC_NAME: Specific name of the metric within the namespace (e.g., CpuUtilization, MemoryAvailable). Table OCI_WORKLOADS contains workload name and compartement id (ocid): - WORKLOAD_NAME: friendly name of the workload. Can be used when user requests data on worklaods - VALUE: Compartment ID, can contain multiple values comma separated and should be used as a where claues with IN.'
);

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (1, 'Show me monthly cost for AI last two months', 
'WITH base AS (SELECT TO_CHAR(DATE_BUCKET, ''YYYY-MM'') AS MONTH, COST, CASE WHEN UPPER(SERVICECATEGORY) LIKE UPPER(''%AI%'') THEN 1 WHEN UPPER(SERVICENAME) LIKE UPPER(''%AI%'') THEN 2 WHEN UPPER(RESOURCETYPE) LIKE UPPER(''%AI%'') THEN 3 WHEN UPPER(RESOURCENAME) LIKE UPPER(''%AI%'') THEN 4 WHEN UPPER(CHARGEDESCRIPTION) LIKE UPPER(''%AI%'') THEN 5 WHEN UPPER(OCI_COMPARTMENTNAME) LIKE UPPER(''%AI%'') THEN 6 WHEN UPPER(OCI_COMPARTMENT_PATH) LIKE UPPER(''%AI%'') THEN 7 WHEN UPPER(USAGEUNIT) LIKE UPPER(''%AI%'') THEN 8 ELSE NULL END AS PRIORITY, CASE WHEN UPPER(SERVICECATEGORY) LIKE UPPER(''%AI%'') THEN ''SERVICECATEGORY'' WHEN UPPER(SERVICENAME) LIKE UPPER(''%AI%'') THEN ''SERVICENAME'' WHEN UPPER(RESOURCETYPE) LIKE UPPER(''%AI%'') THEN ''RESOURCETYPE'' WHEN UPPER(RESOURCENAME) LIKE UPPER(''%AI%'') THEN ''RESOURCENAME'' WHEN UPPER(CHARGEDESCRIPTION) LIKE UPPER(''%AI%'') THEN ''CHARGEDESCRIPTION'' WHEN UPPER(OCI_COMPARTMENTNAME) LIKE UPPER(''%AI%'') THEN ''OCI_COMPARTMENTNAME'' WHEN UPPER(OCI_COMPARTMENT_PATH) LIKE UPPER(''%AI%'') THEN ''OCI_COMPARTMENT_PATH'' WHEN UPPER(USAGEUNIT) LIKE UPPER(''%AI%'') THEN ''USAGEUNIT'' ELSE NULL END AS FIRST_MATCH_COL FROM COST_USAGE_TIMESERIES_DAILY WHERE TO_CHAR(DATE_BUCKET, ''YYYY-MM'') IN (''2025-05'', ''2025-06'')), min_priority AS (SELECT MONTH, MIN(PRIORITY) AS MIN_PRIO FROM base WHERE PRIORITY IS NOT NULL GROUP BY MONTH) SELECT b.MONTH, SUM(b.COST) AS TOTAL_COST FROM base b JOIN min_priority mp ON b.MONTH = mp.MONTH AND b.PRIORITY = mp.MIN_PRIO GROUP BY b.MONTH, b.FIRST_MATCH_COL ORDER BY b.MONTH, b.FIRST_MATCH_COL;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (2, 'How many E5 OCPUs have been consumed in April 2025', 
'WITH base AS (SELECT TO_CHAR(DATE_BUCKET, ''YYYY-MM'') AS MONTH, USAGE, USAGEUNIT, CASE WHEN UPPER(SERVICECATEGORY) LIKE UPPER(''%E5%'') THEN 1 WHEN UPPER(SERVICENAME) LIKE UPPER(''%E5%'') THEN 2 WHEN UPPER(RESOURCETYPE) LIKE UPPER(''%E5%'') THEN 3 WHEN UPPER(RESOURCENAME) LIKE UPPER(''%E5%'') THEN 4 WHEN UPPER(CHARGEDESCRIPTION) LIKE UPPER(''%E5%'') THEN 5 WHEN UPPER(OCI_COMPARTMENTNAME) LIKE UPPER(''%E5%'') THEN 6 WHEN UPPER(OCI_COMPARTMENT_PATH) LIKE UPPER(''%E5%'') THEN 7 WHEN UPPER(USAGEUNIT) LIKE UPPER(''%E5%'') THEN 8 ELSE NULL END AS PRIORITY, CASE WHEN UPPER(SERVICECATEGORY) LIKE UPPER(''%E5%'') THEN ''SERVICECATEGORY'' WHEN UPPER(SERVICENAME) LIKE UPPER(''%E5%'') THEN ''SERVICENAME'' WHEN UPPER(RESOURCETYPE) LIKE UPPER(''%E5%'') THEN ''RESOURCETYPE'' WHEN UPPER(RESOURCENAME) LIKE UPPER(''%E5%'') THEN ''RESOURCENAME'' WHEN UPPER(CHARGEDESCRIPTION) LIKE UPPER(''%E5%'') THEN ''CHARGEDESCRIPTION'' WHEN UPPER(OCI_COMPARTMENTNAME) LIKE UPPER(''%E5%'') THEN ''OCI_COMPARTMENTNAME'' WHEN UPPER(OCI_COMPARTMENT_PATH) LIKE UPPER(''%E5%'') THEN ''OCI_COMPARTMENT_PATH'' WHEN UPPER(USAGEUNIT) LIKE UPPER(''%E5%'') THEN ''USAGEUNIT'' ELSE NULL END AS FIRST_MATCH_COL FROM COST_USAGE_TIMESERIES_DAILY WHERE TO_CHAR(DATE_BUCKET, ''YYYY-MM'') IN (''2025-05'', ''2025-06'')), min_priority AS (SELECT MONTH, MIN(PRIORITY) AS MIN_PRIO FROM base WHERE PRIORITY IS NOT NULL GROUP BY MONTH) SELECT b.MONTH, CASE WHEN MAX(UPPER(b.USAGEUNIT)) LIKE UPPER(''%HOUR%'') THEN SUM(b.USAGE) ELSE (SUM(b.USAGE) * 365) / 12 END AS TOTAL_USAGE FROM base b JOIN min_priority mp ON b.MONTH = mp.MONTH AND b.PRIORITY = mp.MIN_PRIO GROUP BY b.MONTH, b.FIRST_MATCH_COL ORDER BY b.MONTH, b.FIRST_MATCH_COL;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (3, 'Which compartments had the highest cost in April 2025?', 
'SELECT c.OCI_COMPARTMENTNAME AS COMPARTMENT_NAME, SUM(c.COST) AS TOTAL_COST FROM COST_USAGE_TIMESERIES_DAILY c WHERE TO_CHAR(c.DATE_BUCKET, ''YYYY-MM'') = ''2025-04'' GROUP BY c.OCI_COMPARTMENTNAME ORDER BY TOTAL_COST DESC;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (4, 'Top 5 services by cost last month', 
'SELECT c.SERVICENAME,
       ROUND(SUM(c.COST),1) AS TOTAL_COST
FROM COST_USAGE_TIMESERIES_DAILY c
WHERE c.DATE_BUCKET >= TRUNC(ADD_MONTHS(SYSDATE, -1), ''MM'')
  AND c.DATE_BUCKET < TRUNC(SYSDATE, ''MM'')
GROUP BY c.SERVICENAME
ORDER BY TOTAL_COST DESC
FETCH FIRST 5 ROWS ONLY;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (5, 'What was the total usage in GB for Object Storage in June 2025', 
'SELECT 
  SUM(c.USAGE) / TO_NUMBER(LAST_DAY(DATE ''2025-06-01'') - DATE ''2025-06-01'' + 1) AS "TOTAL_USAGE"
FROM COST_USAGE_TIMESERIES_DAILY c
WHERE UPPER(c.CHARGEDESCRIPTION) LIKE UPPER(''%Object Storage%'')
  AND UPPER(c.USAGEUNIT) LIKE UPPER(''%GB%'')
  AND TO_CHAR(c.DATE_BUCKET, ''YYYY-MM'') = ''2025-06'';');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (6, 'Show monthly total cost for the last 3 months', 
'SELECT TO_CHAR(c.DATE_BUCKET, ''YYYY-MM'') AS MONTH,
       SUM(c.COST) AS TOTAL_COST
FROM COST_USAGE_TIMESERIES_DAILY c
WHERE c.DATE_BUCKET >= TRUNC(ADD_MONTHS(SYSDATE, -3), ''MM'')
AND c.DATE_BUCKET < TRUNC(SYSDATE, ''MM'')
GROUP BY TO_CHAR(c.DATE_BUCKET, ''YYYY-MM'')
ORDER BY MONTH DESC;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (7, 'How much did we spend on Block Volume in the last month?', 
'WITH base AS (SELECT TO_CHAR(DATE_BUCKET, ''YYYY-MM'') AS MONTH, COST, USAGEUNIT, CASE WHEN UPPER(SERVICECATEGORY) LIKE UPPER(''%Block Volume%'') THEN 1 WHEN UPPER(SERVICENAME) LIKE UPPER(''%Block Volume%'') THEN 2 WHEN UPPER(RESOURCETYPE) LIKE UPPER(''%Block Volume%'') THEN 3 WHEN UPPER(RESOURCENAME) LIKE UPPER(''%Block Volume%'') THEN 4 WHEN UPPER(CHARGEDESCRIPTION) LIKE UPPER(''%Block Volume%'') THEN 5 WHEN UPPER(OCI_COMPARTMENTNAME) LIKE UPPER(''%Block Volume%'') THEN 6 WHEN UPPER(OCI_COMPARTMENT_PATH) LIKE UPPER(''%Block Volume%'') THEN 7 WHEN UPPER(USAGEUNIT) LIKE UPPER(''%Block Volume%'') THEN 8 ELSE NULL END AS PRIORITY, CASE WHEN UPPER(SERVICECATEGORY) LIKE UPPER(''%Block Volume%'') THEN ''SERVICECATEGORY'' WHEN UPPER(SERVICENAME) LIKE UPPER(''%Block Volume%'') THEN ''SERVICENAME'' WHEN UPPER(RESOURCETYPE) LIKE UPPER(''%Block Volume%'') THEN ''RESOURCETYPE'' WHEN UPPER(RESOURCENAME) LIKE UPPER(''%Block Volume%'') THEN ''RESOURCENAME'' WHEN UPPER(CHARGEDESCRIPTION) LIKE UPPER(''%Block Volume%'') THEN ''CHARGEDESCRIPTION'' WHEN UPPER(OCI_COMPARTMENTNAME) LIKE UPPER(''%Block Volume%'') THEN ''OCI_COMPARTMENTNAME'' WHEN UPPER(OCI_COMPARTMENT_PATH) LIKE UPPER(''%Block Volume%'') THEN ''OCI_COMPARTMENT_PATH'' WHEN UPPER(USAGEUNIT) LIKE UPPER(''%Block Volume%'') THEN ''USAGEUNIT'' ELSE NULL END AS FIRST_MATCH_COL FROM COST_USAGE_TIMESERIES_DAILY WHERE TO_CHAR(DATE_BUCKET, ''YYYY-MM'') IN (''2025-05'', ''2025-06'')), min_priority AS (SELECT MONTH, MIN(PRIORITY) AS MIN_PRIO FROM base WHERE PRIORITY IS NOT NULL GROUP BY MONTH) SELECT b.MONTH, SUM(b.COST) AS TOTAL_USAGE FROM base b JOIN min_priority mp ON b.MONTH = mp.MONTH AND b.PRIORITY = mp.MIN_PRIO GROUP BY b.MONTH, b.FIRST_MATCH_COL ORDER BY b.MONTH, b.FIRST_MATCH_COL;');

INSERT INTO AI_PROMPT_EXAMPLES (example_order, user_question, oracle_sql)
VALUES (8, 'List the top 5 compartments by compute cost in the last two months', 
'WITH base AS (SELECT TO_CHAR(DATE_BUCKET, ''YYYY-MM'') AS MONTH, OCI_COMPARTMENTNAME, COST, CASE WHEN UPPER(SERVICECATEGORY) LIKE UPPER(''%Compute%'') THEN 1 WHEN UPPER(SERVICENAME) LIKE UPPER(''%Compute%'') THEN 2 WHEN UPPER(RESOURCETYPE) LIKE UPPER(''%Compute%'') THEN 3 WHEN UPPER(RESOURCENAME) LIKE UPPER(''%Compute%'') THEN 4 WHEN UPPER(CHARGEDESCRIPTION) LIKE UPPER(''%Compute%'') THEN 5 WHEN UPPER(OCI_COMPARTMENTNAME) LIKE UPPER(''%Compute%'') THEN 6 WHEN UPPER(OCI_COMPARTMENT_PATH) LIKE UPPER(''%Compute%'') THEN 7 WHEN UPPER(USAGEUNIT) LIKE UPPER(''%Compute%'') THEN 8 ELSE NULL END AS PRIORITY FROM COST_USAGE_TIMESERIES_DAILY WHERE DATE_BUCKET >= TRUNC(ADD_MONTHS(SYSDATE, -2), ''MM'') AND DATE_BUCKET < TRUNC(SYSDATE, ''MM'')), min_priority AS (SELECT OCI_COMPARTMENTNAME, MONTH, MIN(PRIORITY) AS MIN_PRIO FROM base WHERE PRIORITY IS NOT NULL GROUP BY OCI_COMPARTMENTNAME, MONTH) SELECT b.OCI_COMPARTMENTNAME AS COMPARTMENT_NAME, SUM(b.COST) AS TOTAL_COST FROM base b JOIN min_priority mp ON b.MONTH = mp.MONTH AND b.OCI_COMPARTMENTNAME = mp.OCI_COMPARTMENTNAME AND b.PRIORITY = mp.MIN_PRIO GROUP BY b.OCI_COMPARTMENTNAME ORDER BY TOTAL_COST DESC FETCH FIRST 5 ROWS ONLY;');

-- Drop objects

DROP TABLE "OCI_FOCUS_REPORTS"."OCI_RESOURCES_RELATIONSHIPS_PY";
DROP TABLE "OCI_FOCUS_REPORTS"."AI_AGENT_CONFIG" CASCADE CONSTRAINTS;

commit;